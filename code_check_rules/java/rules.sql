-- MySQL dump 10.13  Distrib 5.7.17, for Win64 (x86_64)
--
-- Host: localhost    Database: sonar512
-- ------------------------------------------------------
-- Server version	5.7.17

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Dumping data for table `rules`
--

LOCK TABLES `rules` WRITE;
/*!40000 ALTER TABLE `rules` DISABLE KEYS */;
INSERT INTO `rules` VALUES (1,'InsufficientBranchCoverage',NULL,'common-java','<p>An issue is created on a file as soon as the branch coverage on this file is less than the required threshold.It gives the number of branches to be covered in order to reach the required threshold.</p>',2,NULL,'Branches should have sufficient coverage by unit tests','READY','java','2017-09-22 09:51:10','2017-10-10 15:22:03',NULL,NULL,NULL,NULL,NULL,51,NULL,'LINEAR',NULL,'5min',NULL,NULL,'number of uncovered conditions',NULL,'bad-practice',0,'HTML'),(2,'InsufficientLineCoverage',NULL,'common-java','<p>An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.</p>',2,NULL,'Lines should have sufficient coverage by unit tests','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:03',NULL,NULL,NULL,NULL,NULL,51,NULL,'LINEAR',NULL,'2min',NULL,NULL,'number of lines under the coverage threshold',NULL,'bad-practice',0,'HTML'),(3,'InsufficientCommentDensity',NULL,'common-java','<p>An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.</p>',2,NULL,'Source files should have a sufficient density of comment lines','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:03',NULL,NULL,NULL,NULL,NULL,16,NULL,'LINEAR',NULL,'2min',NULL,NULL,'number of lines required to meet minimum density',NULL,'convention',0,'HTML'),(4,'DuplicatedBlocks',NULL,'common-java','<p>An issue is created on a file as soon as there is at least one block of duplicated code on this file.</p>',2,NULL,'Source files should not have any duplicated blocks','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:03',NULL,NULL,NULL,NULL,NULL,36,NULL,'LINEAR_OFFSET',NULL,'10min',NULL,'10min','Number of duplicate blocks',NULL,'pitfall',0,'HTML'),(5,'SkippedUnitTests',NULL,'common-java','<p>Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.</p>',2,NULL,'Skipped unit tests should be either removed or fixed','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:03',NULL,NULL,NULL,NULL,NULL,51,NULL,'LINEAR',NULL,'10min',NULL,NULL,'number of skipped tests',NULL,'pitfall',0,'HTML'),(6,'FailedUnitTests',NULL,'common-java','<p>Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.</p>',2,NULL,'Failed unit tests should be fixed','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:03',NULL,NULL,NULL,NULL,NULL,51,NULL,'LINEAR',NULL,'10min',NULL,NULL,'number of failed tests',NULL,'bug',0,'HTML'),(7,'S2092',NULL,'squid','<p>The \"secure\" attribute prevents cookies from being sent over plaintext connections such as HTTP, where they would be easily eavesdropped upon. Instead, cookies with the secure attribute are only sent over encrypted HTTPS connections.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);  // Noncompliant; cookie is not secure\nresponse.addCookie(c);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(SECRET, secret);\nc.setSecure(true);\nresponse.addCookie(c);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/614\">MITRE, CWE-614</a> - Sensitive Cookie in HTTPS Session Without \'Secure\' Attribute\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li></ul>',3,NULL,'Cookies should be \"secure\"','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cwe,owasp-a2,owasp-a6,security',0,'HTML'),(8,'S2094',NULL,'squid','<p>There is no good excuse for an empty class. If it\'s being used simply as a common extension point, it should be replaced with an <code>interface</code>. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be eliminated.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Nothing {  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Nothing {\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Empty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.</p>\n<pre>\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n</pre>',2,NULL,'Classes should not be empty','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(9,'S2096',NULL,'squid','<p>There\'s no reason for a <code>main</code> method to <code>throw</code> anything. After all, what\'s going to catch it? </p>\n<p>Instead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and perform whatever logging or user communication is necessary, and <code>exit</code> with non-zero (i.e. non-success) exit code if necessary.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n</pre>',3,NULL,'\"main\" should not \"throw\" anything','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'error-handling,security',0,'HTML'),(10,'S1206',NULL,'squid','<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n<p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce the same integer result. </p>\n<p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n<p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYYbAQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a hashCode() method\n</li></ul>',4,NULL,'\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert,cwe',0,'HTML'),(11,'IndentationCheck','S1120','squid','<p>Proper indentation is a simple and effective way to improve the code\'s readability. Consistent indentation among the developers on a team also reduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>By default this rule checks that each block of code is indented but not the size of this indent. The parameter \"indentSize\" allows the expected indent size to be defined. Only the first line of a badly indented section is reported.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a; \n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a; \n  public int b; \n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    } \n  }\n}\n</pre>',1,NULL,'Source code should be indented consistently','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(12,'S1200',NULL,'squid','<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should have only one responsibility:</p>\n<blockquote>\n<p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n<p>Changes to one responsibility may impair or inhibit the class\' ability to meet the others.</p>\n<p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>',2,NULL,'Classes should not be coupled to too many other classes (Single Responsibility Principle)','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2h',NULL,NULL,'brain-overload',0,'HTML'),(13,'S1201',NULL,'squid','<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check. However, this will not work as expected.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {                    // Noncompliant - \"equals\" method which does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));                  // Will display \"false\" because \"o2\" is of type \"Object\" and not \"MyClass\"\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {                     // Compliant - overrides Object.equals(Object)\n    if (o == null || !(o instanceof MyClass)) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n</pre>',2,NULL,'Methods named \"equals\" should override Object.equals(Object)','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'suspicious',0,'HTML'),(14,'S1444',NULL,'squid','<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a state among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to <code>null</code>. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/QQBqAQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields\n</li></ul>',3,NULL,'\"public static\" fields should be constant','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe,security',0,'HTML'),(15,'StringEqualityComparisonCheck','S1127','squid','<p>Strings, just like any other <code>Object</code>, should be compared using the <code>equals()</code> method.</p>\n<p>Using <code>==</code> or <code>!=</code> compares references rather than values, and usually does not work.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (variable == \"foo\") { /* ... */ }\nif (variable != \"foo\") { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (\"foo\".equals(variable)) { /* ... */ }\nif (!\"foo\".equals(variable)) { /* ... */ }\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison\n</li></ul>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S1698} instead.</p>',3,NULL,'Strings should be compared using \"equals()\"','DEPRECATED','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cwe',0,'HTML'),(16,'ModifiersOrderCheck','S1124','squid','<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code\'s readability because most developers are used to the standard order.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>',1,NULL,'Modifiers should be declared in the correct order','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention,psr2',0,'HTML'),(17,'S888',NULL,'squid','<p>Testing <code>for</code> loop termination using an equality operator (<code>==</code> and <code>!=</code>) is dangerous, because it could set up an infinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an infinite loop.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i != 10; i += 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i += 2)  // Compliant\n{\n  //...\n} \n</pre>\n\n<h2>Exceptions</h2>\n<p>Equality operators are ignored if the loop counter is not modified within the body of the loop and either:</p>\n<ul>\n<li> starts below the ending value and is incremented by 1 on each iteration.\n</li><li> starts above the ending value and is decremented by 1 on each iteration.\n</li></ul>\n<p>Equality operators are also ignored when the test is against <code>null</code>.</p>\n<pre>\nfor (int i = 0; arr[i] != null; i++) {\n  // ...\n}\n\nfor (int i = 0; (item = arr[i]) != null; i++) {\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 6-5-2\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/835\">MITRE, CWE-835</a> - Loop with Unreachable Exit Condition (\'Infinite Loop\')\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwDJAQ\">CERT, MSC21-C.</a> - Use robust loop termination conditions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/GwDJAQ\">CERT, MSC21-CPP.</a> - Use inequality to terminate a loop whose counter changes by more than one\n</li></ul>',2,NULL,'Equality operators should not be used in \"for\" loop termination conditions','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,cwe,misra,suspicious',0,'HTML'),(18,'MaximumInheritanceDepth','S110','squid','<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It\'s a way to compartmentalize and reuse code by creating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing of this concept by creating a deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object oriented design which has led to systematically use \'inheritance\' when for instance \'composition\' would suit better.</p>',2,NULL,'Inheritance tree of classes should not be too deep','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'LINEAR_OFFSET',NULL,'30min',NULL,'4h','Number of parents above the defined threshold',NULL,'design',0,'HTML'),(19,'S1314',NULL,'squid','<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not have experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 7.1 - Octal constants (other than zero) and octal escape sequences shall not be used.\n</li><li> MISRA C++:2008, 2-13-2 - Octal constants (other than zero) and octal escape sequences (other than \"\\0\") shall not be used\n</li><li> MISRA C:2012, 7.1 - Octal constants shall not be used\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/_QC7AQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal value\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/hYClBg\">CERT, DCL50-J.</a> - Use visually distinct identifiers\n</li></ul>',2,NULL,'Octal values should not be used','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,misra,pitfall',0,'HTML'),(20,'S1315',NULL,'squid','<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>',1,NULL,'\"CHECKSTYLE:OFF\" suppression comments should not be used','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bad-practice',0,'HTML'),(21,'S1317',NULL,'squid','<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect the character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\'x\');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>',2,NULL,'\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(22,'S1318',NULL,'squid','<p>Inexperienced Java developers might expect the <code>Object.equals(Object obj)</code> method to correctly handle the case where the left hand side is null, but that is not the case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (variable.equals(null)) { /* ... */ }   // Noncompliant - \"variable\" is really null, a NullPointerException is thrown\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == null) { /* ... */ }        // Compliant\n</pre>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S2159} instead.</p>',3,NULL,'\"object == null\" should be used instead of \"object.equals(null)\"','DEPRECATED','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(23,'S1319',NULL,'squid','<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose type is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n<li> is returned from a <code>public</code> method.\n</li><li> is accepted as an argument to a <code>public</code> method.\n</li><li> is exposed as a <code>public</code> member.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>',2,NULL,'Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bad-practice',0,'HTML'),(24,'S2089',NULL,'squid','<p>The fields in an HTTP request are putty in the hands of an attacker, and you cannot rely on them to tell you the truth about anything. While it may be safe to store such values after they have been neutralized, decisions should never be made based on their contents.</p>\n<p>This rule flags uses of the referer header field.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  protected void doPost(HttpServletRequest request, HttpServletResponse response) \n        throws ServletException, IOException {\n    String referer = request.getHeader(\"referer\");  // Noncompliant\n    if(isTrustedReferer(referer)){\n      //..\n    }\n    //...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/293\">MITRE, CWE-293</a> - Using Referer Field for Authentication\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li></ul>',3,NULL,'HTTP referers should not be relied on','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,20,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cwe,owasp-a2,sans-top25-porous,security',0,'HTML'),(25,'S1310',NULL,'squid','<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>',1,NULL,'\"NOPMD\" suppression comments should not be used','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bad-practice',0,'HTML'),(26,'S1312',NULL,'squid','<p>Loggers should be:</p>\n<ul>\n<li> <code>private</code>: not accessible outside of their parent classes. If another class needs to log something, it should instantiate its own logger.\n</li><li> <code>static</code>: not dependent on an instance of a class (an object). When logging something, contextual information can of course be provided in the messages but the logger should be created at class level to prevent creating a logger along with each object.\n</li><li> <code>final</code>: created once and only once per class.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>',1,NULL,'Loggers should be \"private static final\" and should share a naming convention','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention',0,'HTML'),(27,'S1313',NULL,'squid','<p>Hardcoding an IP address into source code is a bad idea for several reasons:</p>\n<ul>\n<li> a recompile is required if the address changes\n</li><li> it forces the same address to be used in every environment (dev, sys, qa, prod)\n</li><li> it places the responsibility of setting the value to use in production on the shoulders of the developer\n</li><li> it allows attackers to decompile the code and thereby discover a potentially sensitive address\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString ip = \"127.0.0.1\";\nSocket socket = new Socket(ip, 6667);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getProperty(\"myapplication.ip\");\nSocket socket = new Socket(ip, 6667);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information\n</li></ul>',3,NULL,'IP addresses should not be hardcoded','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cert,security',0,'HTML'),(28,'ArchitecturalConstraint','S1212','squid','<p>A source code comply to an architectural model when it fully adheres to a set of architectural constraints. A constraint allows to deny references between classes by pattern.</p>\n<p>You can for instance use this rule to :</p>\n<ul>\n<li> forbid access to <code>**.web.**</code> from <code>**.dao.**</code> classes\n</li><li> forbid access to <code>java.util.Vector</code>, <code>java.util.Hashtable</code> and <code>java.util.Enumeration</code> from any classes\n</li><li> forbid access to <code>java.sql.**</code> from <code>**.ui.**</code> and <code>**.web.**</code> classes\n</li></ul>',2,NULL,'Architectural constraints should be followed','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,'HTML'),(29,'ObjectFinalizeOverridenCheck','S1113','squid','<p>This Object.finalize() method is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be few microseconds to few minutes later. So when some system resources need to be disposed by an object, it\'s better to not rely on this asynchronous mechanism to dispose them.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers\n</li></ul>',2,NULL,'The Object.finalize() method should not be overriden','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,unpredictable',0,'HTML'),(30,'ForLoopCounterChangedCheck','S127','squid','<p><code>for</code> loop stop conditions must be invariant (i.e. true at both the beginning and ending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are difficult to understand and maintain, and will likely lead to the introduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n<li> When the loop counters are updated in the body of the <code>for</code> loop\n</li><li> When the stop condition depend upon a method call\n</li><li> When the stop condition depends on an object property, since such properties could change during the execution of the loop.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre> \nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre> \nfor (int i = 0; i &lt; 10; i++) {...} \n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.6 - Numeric variables being used within a <em>for</em> loop for iteration counting shall not be modified in the body of the loop.\n</li><li> MISRA C++:2008, 6-5-3 - The <em>loop-counter</em> shall not be modified within <em>condition</em> or <em>statement</em>.\n</li></ul>',2,NULL,'\"for\" loop stop conditions should be invariant','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'misra,pitfall',0,'HTML'),(31,'S1226',NULL,'squid','<p>While it is technically correct to assign to parameters from within method bodies, it is better to use temporary variables to store intermediate results.</p>\n<p>This rule will typically detect cases where a constructor parameter is assigned to itself instead of a field of the same name, i.e. when <code>this</code> was forgotten.</p>\n<p>Allowing parameters to be assigned to also reduces the code readability as developers will not be able to know whether the original parameter or some temporary variable is being accessed without going through the whole method.</p>\n<p>Moreover, some developers might also expect assignments of method parameters to be visible from callers, which is not the case and can confuse them.</p>\n<p>All parameters should be treated as <code>final</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    name = name;                    // Noncompliant - useless identity assignment\n  }\n\n  public int add(int a, int b) {\n    a = a + b;                      // Noncompliant\n\n    /* additional logic */\n\n    return a;                       // Seems like the parameter is returned as is, what is the point?\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);                  // Variable \"a\" will still hold 40 after this call\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  public String name;\n\n  public MyClass(String name) {\n    this.name = name;               // Compliant\n  }\n\n  public int add(int a, int b) {\n    return a + b;                   // Compliant\n  }\n\n  public static void main(String[] args) {\n    MyClass foo = new MyClass();\n    int a = 40;\n    int b = 2;\n    foo.add(a, b);\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2012, 17.8 - A function parameter should not be modified\n</li></ul>',2,NULL,'Method parameters, caught exceptions and foreach variables should not be reassigned','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'misra,pitfall',0,'HTML'),(32,'S2437',NULL,'squid','<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and <code>anyValue | 0</code>.</p>',2,NULL,'Silly bit operations should not be performed','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'suspicious',0,'HTML'),(33,'S1228',NULL,'squid','<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using javadoc and declare package annotations.</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>',1,NULL,'Packages should have a javadoc file \'package-info.java\'','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'convention',0,'HTML'),(34,'S2438',NULL,'squid','<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are different, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose running should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n	public static void main(String[] args) {\n		Thread r =new Thread() {\n			int p;\n			@Override\n			public void run() {\n				while(true)\n					System.out.println(\"a\");\n			}\n		};\n		new Thread(r).start();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n	public static void main(String[] args) {\n		Runnable r =new Runnable() {\n			int p;\n			@Override\n			public void run() {\n				while(true)\n					System.out.println(\"a\");\n			}\n		};\n		new Thread(r).start();\n</pre>',2,NULL,'\"Threads\" should not be used where \"Runnables\" are expected','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'multi-threading,pitfall',0,'HTML'),(35,'S1220',NULL,'squid','<p>According to the Java Language Specification:</p>\n<blockquote>\n<p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>',1,NULL,'The default unnamed package should not be used','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'convention',0,'HTML'),(36,'S1221',NULL,'squid','<p>Naming a method <code>hashcode()</code> or <code>equal</code> is either:</p>\n<ul>\n<li> A bug in the form of a typo. Overriding <code>Object.hashCode()</code> (note the camelCasing) or <code>Object.equals</code> (note the \'s\' on the end) was meant, and the application does not behave as expected.\n</li><li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n</li></ul>\n<p>In both cases, the method should be renamed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\npublic boolean equals(Object obj) { /* ... */ } \n</pre>',3,NULL,'Methods should not be named \"hashcode\" or \"equal\"','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bug,pitfall',0,'HTML'),(37,'S1223',NULL,'squid','<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or was the methods supposed to be a constructor.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>',2,NULL,'Non-constructor methods should not have the same name as the enclosing class','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(38,'TrailingCommentCheck','S139','squid','<p>This rule verifies that single-line comments are not located at the end of a line of code. The main idea behind this rule is that in order to be really readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of the code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable. Comments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>\n\n<h2>Exceptions</h2>\n<p>By default, the property \"legalTrailingCommentPattern\" allows to ignore comments containing only one word :</p>\n<pre>\ndoSomething(); //FIXME\n</pre>',0,NULL,'Comments should not be located at the end of lines of code','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(39,'S1215',NULL,'squid','<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason:</p>\n<p>there is no way to know exactly what will be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n<li> Will the whole application be frozen during the call?\n</li><li> Is the -XX:DisableExplicitGC option activated?\n</li><li> Will the JVM simply ignore the call?\n</li><li> ...\n</li></ul>\n<p>An application relying on those unpredictable methods is also unpredictable and therefore broken.</p>\n<p>The task of running the garbage collector should be left exclusively to the JVM.</p>',2,NULL,'Execution of the Garbage Collector should be triggered only by the JVM','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bad-practice,unpredictable',0,'HTML'),(40,'S1699',NULL,'squid','<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the method.</p>\n<p>For example:</p>\n<ul>\n<li> The subclass class constructor starts by contract by calling the parent class constructor.\n</li><li> The parent class constructor calls the method, which has been overridden in the child class.\n</li><li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a <code>NullPointerException</code>) can result, because the fields aren\'t initialized yet.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/MYYbAQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/TQBi\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors\n</li></ul>',2,NULL,'Constructors should only call non-overridable methods','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cert,pitfall',0,'HTML'),(41,'S1217',NULL,'squid','<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn\'t make sense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/572.html\">MITRE, CWE-572</a> - Call to Thread run() instead of start()\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQAiAg\">CERT THI00-J.</a> - Do not invoke Thread.run()\n</li></ul>',3,NULL,'Thread.run() should not be called directly','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,cert,cwe,multi-threading',0,'HTML'),(42,'S1219',NULL,'squid','<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing error.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what\'s expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable \n         /* ... */\n        break foo;  // this break statement doesn\'t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li></ul>',2,NULL,'\"switch\" statements should not contain non-case labels','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'misra,suspicious',0,'HTML'),(43,'S1451',NULL,'squid','<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>',4,NULL,'Copyright and license headers should be defined','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,NULL,0,'HTML'),(44,'S1210',NULL,'squid','<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n<p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n<p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n<p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it relies on <code>equals()</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>',3,NULL,'\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug',0,'HTML'),(45,'S1452',NULL,'squid','<p>Using a wildcard as a return type implicitly means that the return parameter should be considered as read-only but without any way to enforce this contract. </p>\n<p>Let\'s take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don\'t know. The consumer of a method should not have to deal with such disruptive questions. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>',2,NULL,'Generic wildcard types should not be used in return parameters','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'pitfall',0,'HTML'),(46,'S1694',NULL,'squid','<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the <code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>',1,NULL,'An abstract class should have both abstract and concrete methods','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention',0,'HTML'),(47,'S1695',NULL,'squid','<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates that code is structured to avoid NPE\'s. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method\'s callers to explicitly catch it, rather than coding to avoid it. Further, it makes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely throw an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>',2,NULL,'\"NullPointerException\" should not be explicitly thrown','READY','java','2017-09-22 09:51:11','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'pitfall',0,'HTML'),(48,'S2301',NULL,'squid','<p>A selector argument is a <code>boolean</code> argument that\'s used to determine which of two paths to take through a method. Specifying such a parameter may seem innocuous, particularly if it\'s well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won\'t see the parameter name, only its value. They\'ll be forced either to guess at the meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that\'s used to determine which path to take through the method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>',2,NULL,'Public methods should not contain selector arguments','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,11,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'design',0,'HTML'),(49,'S1696',NULL,'squid','<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can easily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of the conditional.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/395.html\">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer Dereference\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n</li></ul>',2,NULL,'\"NullPointerException\" should not be caught','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,cwe,error-handling',0,'HTML'),(50,'S1213',NULL,'squid','<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order in the source files:</p>\n<ul>\n<li> Class and instance variables\n</li><li> Constructors\n</li><li> Methods\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{ \n   private int field = 0;\n   public boolean isTrue() {...}     \n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{ \n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>',1,NULL,'The members of an interface declaration or class should appear in a pre-defined order','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention',0,'HTML'),(51,'S1697',NULL,'squid','<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely null-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced <em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>',4,NULL,'Short-circuit logic should be used to prevent null pointer dereferences in conditionals','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'bug',0,'HTML'),(52,'S1214',NULL,'squid','<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n<blockquote>\n<p>The constant interface pattern is a poor use of interfaces. </p>\n<p>That a class uses some constants internally is an implementation detail.</p>\n<p>Implementing a constant interface causes this implementation detail to leak into the class\'s exported API. It is of no consequence to the users of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility. If a nonfinal class implements a constant interface,</p>\n<p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>',1,NULL,'Constants should not be defined in interfaces','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bad-practice',0,'HTML'),(53,'S1698',NULL,'squid','<p>Using the equality (<code>==</code>) and inequality (<code>!=</code>) operators to compare two objects does not check to see if they have the same values. Rather it checks to see if both object references point to exactly the same object in memory. The vast majority of the time, this is not what you want to do. Use the <code>.equals()</code> method to compare the values of two objects or to compare a string object to a string literal.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str1 = \"blue\";\nString str2 = \"blue\";\nString str3 = str1;\n\nif (str1 == str2)\n{\n  System.out.println(\"they\'re both \'blue\'\"); // this doesn\'t print because the objects are different\n}\n\nif (str1 == \"blue\")\n{\n  System.out.println(\"they\'re both \'blue\'\"); // this doesn\'t print because the objects are different\n}\n\nif (str1 == str3)\n{\n  System.out.println(\"they\'re the same object\"); // this prints\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString str1 = \"blue\";\nString str2 = \"blue\";\nString str3 = str1;\n\nif (str1.equals(str2))\n{\n  System.out.println(\"they\'re both \'blue\'\"); // this prints\n}\n\nif (str1.equals(\"blue\"))\n{\n  System.out.println(\"they\'re both \'blue\'\"); // this prints\n}\n\nif (str1 == str3)\n{\n  System.out.println(\"they\'re the same object\"); // this still prints, but it\'s probably not what you meant to do\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/597\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/wwD1AQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed primitives\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/8AEqAQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n</li></ul>',2,NULL,'Objects should be compared with \"equals()\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,cwe',0,'HTML'),(54,'EmptyFile','S2309','squid','<p>Files with no lines of code clutter a project and should be removed. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>',2,NULL,'Files should not be empty','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'unused',0,'HTML'),(55,'RedundantThrowsDeclarationCheck','S1130','squid','<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<ul>\n<li> listed multiple times\n</li><li> a subclass of another listed exception\n</li><li> a <code>RuntimeException</code>, or one of its descendants\n</li><li> completely unnecessary because the declared exception type cannot actually be thrown\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\nvoid baz() throws RuntimeException {}  // Noncompliant; RuntimeException can always be thrown\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\nvoid baz() {}\n</pre>',1,NULL,'Throws declarations should not be superfluous','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy,unused',0,'HTML'),(56,'ObjectFinalizeOverridenCallsSuperFinalizeCheck','S1114','squid','<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also dispose some system resources.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();    \n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize()\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers\n</li></ul>',4,NULL,'super.finalize() should be called at the end of Object.finalize() implementations','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert,cwe',0,'HTML'),(57,'LeftCurlyBraceStartLineCheck','S1106','squid','<p>Shared coding conventions make it possible to collaborate efficiently. This rule make it mandatory to place the open curly brace at the beginning of a line.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod \n{\n  if(something) \n  {\n    executeTask();\n  } else \n  {\n    doSomethingElse();\n  }\n}\n</pre>',1,NULL,'An open curly brace should be located at the beginning of a line','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(58,'ClassVariableVisibilityCheck','S1104','squid','<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n<li> Additional behavior such as validation cannot be added.\n</li><li> The internal representation is exposed, and cannot be changed afterwards.\n</li><li> Member values are subject to change from anywhere in the code and may not meet the programmer\'s assumptions.\n</li></ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier\n</li></ul>',2,NULL,'Class variable fields should not have public accessibility','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cwe',0,'HTML'),(59,'RightCurlyBraceDifferentLineAsNextBlockCheck','S1108','squid','<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on two different lines.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>',1,NULL,'Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(60,'S2055',NULL,'squid','<p>When a <code>Serializable</code> object has a non-serializable ancestor in its inheritance chain, object deserialization (re-instantiating the object from file) starts at the first non-serializable class, and proceeds down the chain, adding the properties of each subsequent child class, until the final object has been instantiated. </p>\n<p>In order to create the non-serializable ancestor, its no-argument constructor is called. Therefore the non-serializable ancestor of a <code>Serializable</code> class must have a no-arg constructor. Otherwise the class is <code>Serializable</code> but not deserializable.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit \n        implements Serializable {  // Noncompliant; nonserializable ancestor doesn\'t have no-arg constructor\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public Fruit () {...};  // Compliant; no-arg constructor added to ancestor\n  public Fruit (Season ripe) {...}\n  public void setRipe(Season ripe) {...}\n  public Season getRipe() {...}\n}\n\npublic class Raspberry extends Fruit \n        implements Serializable {\n  private static final long serialVersionUID = 1;\n\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) {...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>',3,NULL,'The non-serializable super class of a \"Serializable\" class should have a no-argument constructor','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug,serialization',0,'HTML'),(61,'S2176',NULL,'squid','<p>While it\'s perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it\'s confusing and could cause problems in the future. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n</pre>',2,NULL,'Class names should not shadow interfaces or superclasses','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(62,'S2175',NULL,'squid','<p>A couple <code>Collection</code> methods can be called with arguments of an incorrect type, but doing so is pointless and likely the result of using the wrong argument. This rule will raise an issue when the type of the argument to <code>List.contains</code> or <code>List.remove</code> is unrelated to the type used for the list declaration.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; list = new ArrayList&lt;String&gt;();\nInteger integer = Integer.valueOf(1);\n\nif (list.contains(integer)) {  // Noncompliant. Always false.\n  list.remove(integer); // Noncompliant. list.add(integer) doesn\'t compile, so this will always return false\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/QwFlAQ\">CERT, EXP04-J.</a> - Do not pass arguments to certain Java Collections Framework methods that are a different type than the collection parameter type\n</li></ul>',3,NULL,'Inappropriate \"Collection\" calls should not be made','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert',0,'HTML'),(63,'S2178',NULL,'squid','<p>The use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are evaluated under the wrong circumstances.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(getTrue() || getFalse()) { ... }  // true short-circuit logic\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/g4FtAg\">CERT, EXP46-C.</a> - Do not use a bitwise operator with a Boolean-like operand\n</li></ul>',3,NULL,'Short-circuit logic should be used in boolean contexts','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert',0,'HTML'),(64,'S2057',NULL,'squid','<p>A <code>serialVersionUID</code> field is required in all <code>Serializable</code> classes. If you do not provide one, one will be calculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an entirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the class.</p>\n<p><code>serialVersionUID</code>\'s should be declared with all of these modifiers: <code>static final long</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID. \n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID = 1; // Noncompliant; not static &amp; int rather than long\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID = 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Swing and AWT classes, <code>abstract</code> classes, <code>Throwable</code> and its subclasses (<code>Exception</code>s and <code>Error</code>s), and classes marked with <code>@SuppressWarnings(\"serial\")</code> are ignored.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYCpAQ\">CERT, SER00-J.</a> - Enable serialization compatibility during class evolution\n</li></ul>',2,NULL,'\"Serializable\" classes should have a version id','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,35,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,pitfall,serialization',0,'HTML'),(65,'S2059',NULL,'squid','<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is actually serializable, then the serialization will succeed but possibly write out far more data than was intended. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n<li> an inner class can only be instantiated within the context of an instance of the outer class. \n</li><li> a nested (<code>static</code>) class can be instantiated independently of the outer class.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT, SER05-J.</a> - Do not serialize instances of inner classes\n</li></ul>',2,NULL,'\"Serializable\" inner classes of \"Serializable\" classes should be static','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,pitfall,serialization',0,'HTML'),(66,'S1643',NULL,'squid','<p>Strings are immutable objects, so concatenation doesn\'t simply add the new String to the end of the existing string. Instead, in each loop iteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted back to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>',2,NULL,'Strings should not be concatenated using \'+\' in a loop','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'performance',0,'HTML'),(67,'S1764',NULL,'squid','<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste error and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical operators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<p>This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoZ();\n\nif ( a == b ) {\n  doX();\n}\nif ( a == b ) {\n  doW();\n}\n\nint j = 1;\nint k = 0;\n</pre>\n\n<h2>Exceptions</h2>\n<p>The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<p>Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored.</p>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li><li> Rule {rule:squid:S1656} - Implements a check on <code>=</code>. \n</li></ul>',3,NULL,'Identical expressions should not be used on both sides of a binary operator','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'bug,cert',0,'HTML'),(68,'S1190',NULL,'squid','<p>Through Java\'s evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java, it will not be under modern versions. </p>\n<table>\n<tr><th>Keyword</th><th>Added</th></tr>\n<tr><td>assert</td><td>1.4</td></tr>\n<tr><td>const</td><td>reserved</td></tr>\n<tr><td>enum</td><td>5.0</td></tr>\n<tr><td>goto</td><td>reserved</td></tr>\n<tr><td>strictfp</td><td>1.2</td></tr>\n</table>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  int enum = 42;            // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething() {\n  int magic = 42;\n}\n</pre>',2,NULL,'Future keywords should not be used as names','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,6,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'obsolete,pitfall',0,'HTML'),(69,'S1191',NULL,'squid','<p>Classes in the <code>sun.*</code> or <code>com.sun.*</code> packages are considered implementation details, and are not part of the Java API.</p>\n<p>They can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause problems when moving to a different Java vendor, such as OpenJDK.</p>\n<p>Such classes are almost always wrapped by Java API classes that should be used instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n</pre>',2,NULL,'Classes from \"sun.*\" packages should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,6,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1h',NULL,NULL,'lock-in,pitfall',0,'HTML'),(70,'S1192',NULL,'squid','<p>Duplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.</p>\n<p>On the other hand, constants can be referenced from many places, but only need to be updated in a single place.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"\'\" + a + \"\'\");               // Compliant - literal \"\'\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final String ACTION_1 = \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>To prevent generating some false-positives, literals having less than 5 characters are excluded.</p>',1,NULL,'String literals should not be duplicated','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'LINEAR_OFFSET',NULL,'2min',NULL,'2min','per duplicate instance',NULL,'design',0,'HTML'),(71,'S1193',NULL,'squid','<p>Multiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/5gFFB\">CERT, ERR51-J.</a> - Prefer user-defined exceptions over more general exception types\n</li></ul>',2,NULL,'Exception types should not be tested using \"instanceof\" in catch blocks','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cert,error-handling',0,'HTML'),(72,'S2160',NULL,'squid','<p>Extend a class that overrides <code>equals</code> and add fields without overriding <code>equals</code> in the subclass, and you run the risk of non-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.</p>\n<p>This rule looks for classes that do all of the following:</p>\n<ul>\n<li> extend classes that override <code>equals</code>.\n</li><li> do not themselves override <code>equals</code>.\n</li><li> add fields.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit\'s equals method\n  private Color ripeColor;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (this.class != obj.class) {\n      return false;\n    }\n    Fruit fobj = (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj = (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n</pre>',2,NULL,'Subclasses that add fields should override \"equals\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'suspicious',0,'HTML'),(73,'S1194',NULL,'squid','<p><code>java.lang.Error</code> and its subclasses represent abnormal conditions, such as <code>OutOfMemoryError</code>, which should only be encountered by the Java Virtual Machine.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception { /* ... */ }   // Compliant\n</pre>',1,NULL,'\"java.lang.Error\" should not be extended','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'error-handling',0,'HTML'),(74,'CommentedOutCodeLine','S125','squid','<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 2.4 - Sections of code should not be \"commented out\".\n</li><li> MISRA C++:2008, 2-7-2 - Sections of code shall not be \"commented out\" using C-style comments.\n</li><li> MISRA C++:2008, 2-7-3 - Sections of code should not be \"commented out\" using C++ comments.\n</li><li> MISRA C:2012, Dir. 4.4 - Sections of code should not be \"commented out\"\n</li></ul>',2,NULL,'Sections of code should not be \"commented out\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'misra,unused',0,'HTML'),(75,'S1195',NULL,'squid','<p>According to the Java Language Specification: </p>\n<blockquote>\n<p>For compatibility with older versions of the Java SE platform,</p>\n<p>the declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the array type after the formal parameter list.</p>\n<p>This obsolescent syntax should not be used in new code.</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ } \n</pre>',1,NULL,'Array designators \"[]\" should be located after the type in method signatures','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention',0,'HTML'),(76,'S2162',NULL,'squid','<p>A key facet of the <code>equals</code> contract is that if <code>a.equals(b)</code> then <code>b.equals(a)</code>, i.e. that the relationship is symmetric. </p>\n<p>Using <code>instanceof</code> breaks the contract when there are subclasses, because while the child is an <code>instanceof</code> the parent, the parent is not an <code>instanceof</code> the child. For instance, assume that <code>Raspberry extends Fruit</code> and adds some fields (requiring a new implementation of <code>equals</code>):</p>\n<pre>\nFruit fruit = new Fruit();\nRaspberry raspberry = new Raspberry();\n\nif (raspberry instanceof Fruit) { ... } // true\nif (fruit instanceof Raspberry) { ... } // false\n</pre>\n<p>If similar <code>instanceof</code> checks were used in the classes\' <code>equals</code> methods, the symmetry principle would be broken:</p>\n<pre>\nraspberry.equals(fruit); // false\nfruit.equals(raspberry); //true\n</pre>\n<p>Additionally, non <code>final</code> classes shouldn\'t use a hardcoded class name in the <code>equals</code> method because doing so breaks the method for subclasses. Instead, make the comparison dynamic.</p>\n<p>Further, comparing to an unrelated class type breaks the contract for that unrelated type, because while <code>thisClass.equals(unrelatedClass)</code> can return true, <code>unrelatedClass.equals(thisClass)</code> will not.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (Fruit.class == obj.getClass()) { // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    if (obj instanceof Fruit ) {  // Noncompliant; broken for child classes\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    else if (obj instanceof Season) { // Noncompliant; symmetry broken for Season class\n      // ...\n    }\n    //...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit extends Food {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj == this) {\n      return true;\n    }\n    if (obj == null) {\n      return false;\n    }\n    if (this.getClass() == obj.getClass()) {\n      return ripe.equals(((Fruit)obj).getRipe());\n    }\n    return false;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/zIUbAQ\">CERT, MET08-J.</a> - Preserve the equality contract when overriding the equals() method\n</li></ul>',3,NULL,'\"equals\" methods should be symmetric and work for subclasses','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert',0,'HTML'),(77,'UnusedProtectedMethod','S1815','squid','<p>Protected methods that are never used by any of the classes in the same project are suspected to be dead code. Dead code is unnecessary, inoperative code that should be removed. Removing dead code makes maintenance easier by decreasing the size of the maintained code base, thereby making it easier to understand the program and preventing the introduction of bugs.</p>\n<p>Unused protected methods are not considered dead code in the following cases:</p>\n<ul>\n<li> Protected methods which override a parent class method.\n</li><li> Protected methods of an abstract class.\n</li></ul>',2,NULL,'Unused protected methods should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'unused',0,'HTML'),(78,'S2165',NULL,'squid','<p>There is no point in setting class fields to <code>null</code> in a finalizer. If this this is a hint to the garbage collector, it is unnecessary - the object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name = null;  // Noncompliant; completely unnecessary\n</pre>',2,NULL,'\"finalize\" should not set fields to \"null\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy,performance',0,'HTML'),(79,'S1197',NULL,'squid','<p>Array designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the variable name to know whether or not a variable is an array.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint[][] matrix;   // Compliant\n</pre>',1,NULL,'Array designators \"[]\" should be on the type, not the variable','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention',0,'HTML'),(80,'S2164',NULL,'squid','<p>For small numbers, <code>float</code> math has enough precision to yield the expected value, but for larger numbers, it does not. <code>BigDecimal</code> is the best alternative, but if a primitive is required, use a <code>double</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nfloat c = a + b; // Noncompliant; yields 1.6777216E7 not 1.6777217E7\n\ndouble d = a + b; // Noncompliant; addition is still between 2 floats\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfloat a = 16777216.0f;\nfloat b = 1.0f;\nBigDecimal c = BigDecimal.valueOf(a).add(BigDecimal.valueOf(b));\n\ndouble d = (double)a + (double)b;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/DgU\">CERT, FLP02-C.</a> - Avoid using floating-point numbers when precise computation is needed\n</li></ul>',3,NULL,'Math should not be performed on floats','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert',0,'HTML'),(81,'S2167',NULL,'squid','<p>It is the sign, rather than the magnitude of the value returned from <code>compareTo</code> that matters. Returning <code>Integer.MIN_VALUE</code> does <em>not</em> convey a higher degree of inequality, and doing so can cause errors because the return value of <code>compareTo</code> is sometimes inversed, with the expectation that negative values become positive. However, inversing <code>Integer.MIN_VALUE</code> yields <code>Integer.MIN_VALUE</code> rather than <code>Integer.MAX_VALUE</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return Integer.MIN_VALUE;  // Noncompliant\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int compareTo(MyClass) {\n  if (condition) {\n    return -1;\n  }\n</pre>',3,NULL,'\"compareTo\" should not return \"Integer.MIN_VALUE\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(82,'S1199',NULL,'squid','<p>Nested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method typically indicates that the method has too many responsibilities, and should be refactored into smaller methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD: {                                // Noncompliant - nested code block \'{\' ... \'}\'\n        int a = stack.pop();\n        int b = stack.pop();\n        int result = a + b;\n        stack.push(result);\n        break;\n      }\n    /* ... */\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void evaluate(int operator) {\n  switch (operator) {\n    /* ... */\n    case ADD:                                  // Compliant\n      evaluateAdd();\n      break;\n    /* ... */\n  }\n}\n\nprivate void evaluateAdd() {\n  int a = stack.pop();\n  int b = stack.pop();\n  int result = a + b;\n  stack.push(result);\n}\n</pre>',2,NULL,'Nested code blocks should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bad-practice',0,'HTML'),(83,'S2166',NULL,'squid','<p>Clear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code. Using \"exception\" in the name of a class that does not extend <code>Exception</code> or one of its subclasses is a clear violation of the expectation that a class\' name will indicate what it is and/or does.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n</pre>',2,NULL,'Classes named like \"Exception\" should extend \"Exception\" or a subclass','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention,pitfall',0,'HTML'),(84,'S1871',NULL,'squid','<p>Having two <code>cases</code> in the same <code>switch</code> statement or branches in the same <code>if</code> structure  with the same implementation is at best duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> structure they should be combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<p>Moreover when the second and third operands of a ternary operator are the same, the operator will always return the same value regardless of the condition. Either the operator itself is pointless, or a mistake was made in coding it.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1: \n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1\'s implementation\n    doSomething(); \n    break;\n  default: \n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest(); \n}\n\nif (b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doOneMoreThing(); // Noncompliant; duplicates then-branch\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant; always results in the same value\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (i) {\n  case 1: \n  case 3:\n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  default: \n    doTheRest();\n}\n\nif ((a &gt;= 0 &amp;&amp; a &lt; 10) || (a &gt;= 20 &amp;&amp; a &lt; 50)) {\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse {\n  doTheRest(); \n}\n\ndoOneMoreThing();\n\nint b = 4;\n</pre>\n<p>or </p>\n<pre>\nswitch (i) {\n  case 1: \n    doSomething();\n    break;\n  case 2: \n    doSomethingDifferent();\n    break;\n  case 3:\n    doThirdThing(); \n    break;\n  default: \n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doTheThirdThing();\n}\nelse {\n  doTheRest(); \n}\n\nif (b == 0) {\n  doOneMoreThing();\n}\nelse {\n  doTheRest();\n}\n\nint b = a &gt; 12 ? 4 : 8;\n</pre>',2,NULL,'Two branches in the same conditional structure should not have exactly the same implementation','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'design,suspicious',0,'HTML'),(85,'S1872',NULL,'squid','<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object\'s type based on its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted class and thereby gain trusted access. </p>\n<p>Instead, the <code>instanceof</code> operator should be used to check the object\'s underlying type.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/LAFlAQ\">CERT, OBJ09-J.</a> - Compare classes and not class names\n</li></ul>',3,NULL,'Classes should not be compared by name','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert,cwe,security',0,'HTML'),(86,'S1873',NULL,'squid','<p>Public arrays, even ones declared <code>static final</code> can have their contents edited by malicious programs. The <code>final</code> keyword on an array declaration means that the array object itself may only be assigned once, but its contents are still mutable. Therefore making arrays <code>public</code> is a security risk.</p>\n<p>Instead, arrays should be private and accessed through methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Estate {\n  // Noncompliant; array contents can be modified\n  public static final String [] HEIRS = new String [] { \n    \"Betty\", \"Suzy\" };\n}\n\npublic class Malicious {\n  public void changeWill() {\n    Estate.HEIRS[0] = \"Biff\";\n    if (Estate.HEIRS.length &gt; 1) {\n      for (int i = 1; i &lt; Estate.HEIRS.length; i++) {\n        Estate.HEIRS[i] = \"\";\n      }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Estate {\n  private static final String [] HEIRS = new String [] { \n    \"Betty\", \"Suzy\" };\n\n  public String [] getHeirs() {\n    // return copy of HEIRS\n  }\n}\n\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n</li></ul>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S2385} instead.</p>',3,NULL,'\"static final\" arrays should be \"private\"','DEPRECATED','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,18,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cwe,security',0,'HTML'),(87,'S1994',NULL,'squid','<p>It is almost always an error when a <code>for</code> loop\'s stop condition and incrementer don\'t act on the same variable. Even when it is not, it could confuse future maintainers of the code, and should be avoided.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n}\n</pre>',2,NULL,'\"for\" loop incrementers should modify the variable being tested in the loop\'s stop condition','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'suspicious',0,'HTML'),(88,'S2070',NULL,'squid','<p>The MD5 algorithm and its successor, SHA-1, are no longer considered secure, because it is too easy to create hash collisions with them. That is, it takes too little computational effort to come up with a different input that produces the same MD5 or SHA-1 hash, and using the new, same-hash value gives an attacker the same access as if he had the originally-hashed value. This applies as well to the other Message-Digest algorithms: MD2, MD4, MD6.</p>\n<p>This rule tracks usage of the <code>java.security.MessageDigest</code>, and <code>org.apache.commons.codec.digest.DigestUtils</code> classes  to instantiate MD or SHA-1 algorithms, and of Guava\'s <code>com.google.common.hash.Hashing sha1</code> and <code>md5</code> methods. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA1\");  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<p>or</p>\n<pre>\nCipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/328\">MITRE, CWE-328</a> - Reversible One-Way Hash\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/327\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#WEAK_MESSAGE_DIGEST\">MessageDigest Is Weak</a>\n</li></ul>',3,NULL,'SHA-1 and Message-Digest hash algorithms should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cwe,owasp-a6,sans-top25-porous,security',0,'HTML'),(89,'EmptyStatementUsageCheck','S1116','squid','<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n<li> It was meant to be replaced by an actual statement, but this was forgotten.\n</li><li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n  for (int i = 0; i &lt; 3; System.out.println(i), i++);       // Noncompliant - Rarely, they are used on purpose as the body of a loop. It is a bad practice to have side-effects outside of the loop body\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++){\n    System.out.println(i);\n  }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 14.3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment provided that the first character following the null statement is a white-space character.\n</li><li> MISRA C++:2008, 6-2-3 - Before preprocessing, a null statement shall only occur on a line by itself; it may be followed by a comment, provided that the first character following the null statement is a white-space character.\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/7gCTAw\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while condition\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4FtAg\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while statement\n</li></ul>',1,NULL,'Empty statements should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,misra,unused',0,'HTML'),(90,'S1309',NULL,'squid','<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n</pre>\n\n<h2>Compliant Solution</h2>\n<p>With the default parameter value of \"all\":</p>\n<pre>\n@SuppressWarnings(\"unchecked\")\n@SuppressWarnings(\"unused\")\n</pre>',0,NULL,'The @SuppressWarnings annotation should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,NULL,0,'HTML'),(91,'S2077',NULL,'squid','<p>Applications that execute SQL commands should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed.</p>\n<p>This rule checks that method parameters are not used directly in non-Hibernate SQL statements, and that parameter binding, rather than concatenation is used in Hibernate statements.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  Statement stmt2 = null;\n  PreparedStatement pstmt;\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\"); // Compliant; parameters not used here\n\n    stmt2 = con.createStatement();\n    ResultSet rs2 = stmt2.executeQuery(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n\n    pstmt = con.prepareStatement(\"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=\" + user);  // Noncompliant; parameter concatenated directly into query\n    ResultSet rs3 = pstmt.executeQuery();\n\n    //...\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query = session.createQuery(  // Compliant\n            \"FROM students where fname = \" + userInput);  // Noncompliant; parameter binding should be used instead\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic User getUser(Connection con, String user) throws SQLException {\n\n  Statement stmt1 = null;\n  PreparedStatement pstmt = null;\n  String query = \"select FNAME, LNAME, SSN \" +\n                 \"from USERS where UNAME=?\"\n  try {\n    stmt1 = con.createStatement();\n    ResultSet rs1 = stmt1.executeQuery(\"GETDATE()\");\n\n    pstmt = con.prepareStatement(query);\n    pstmt.setString(1, user);  // Compliant; PreparedStatements escape their inputs.\n    ResultSet rs2 = pstmt.executeQuery();\n\n    //...\n  }\n}\n\npublic User getUserHibernate(org.hibernate.Session session, String userInput) {\n\n  org.hibernate.Query query =  session.createQuery(\"FROM students where fname = ?\");\n  query = query.setParameter(0,userInput);  // Parameter binding escapes all input\n  // ...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/89\">MITRE, CWE-89</a> - Improper Neutralization of Special Elements used in an SQL Command\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/564.html\">MITRE, CWE-564</a> - SQL Injection: Hibernate\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/943.html\">MITRE, CWE-943</a> - Improper Neutralization of Special Elements in Data Query Logic\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/PgIRAg\">CERT, IDS00-J.</a> - Prevent SQL injection\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components\n</li><li> Derived from FindSecBugs rules <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JPA\">Potential SQL/JPQL Injection (JPA)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_JDO\">Potential SQL/JDOQL Injection (JDO)</a>, <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SQL_INJECTION_HIBERNATE\">Potential SQL/HQL Injection (Hibernate)</a>\n</li></ul>',3,NULL,'Values passed to SQL commands should be sanitized','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,20,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe,hibernate,owasp-a1,sans-top25-insecure,security,sql',0,'HTML'),(92,'S2076',NULL,'squid','<p>Applications that execute operating system commands or execute commands that interact with the underlying system should neutralize any externally-provided values used in those commands. Failure to do so could allow an attacker to include input that executes unintended commands, or exposes sensitive data.</p>\n<p>This rule logs issues for dynamically-built commands, and when parameter values are used to influence how a command is run. it\'s then up to the auditor to figure out if the command execution is secure or not. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void listContent(String input) {\n  Runtime rt = Runtime.getRuntime();\n  rt.exec(\"ls \" + input); // Noncompliant; input could easily contain extra commands\n  ...\n}\n\npublic void execute(String command, String argument) {\n  ProcessBuilder pb = new ProcessBuilder(command, argument); // Noncompliant\n  ...\n}\n\npublic void doTheThing(String path) {\n  ProcessBuilder pb = new ProcessBuilder(\"ls\");  // command hard coded. So far, so good\n  pb.redirectOutput(path);  // Noncompliant\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/78\">MITRE, CWE-78</a> - Improper Neutralization of Special Elements used in an OS Command\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/88\">MITRE, CWE-88</a> - Argument Injection or Modification\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Insecure Interaction Between Components\n</li><li> Derived from the FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#COMMAND_INJECTION\">Potential Command Injection</a>\n</li></ul>',3,NULL,'Values passed to OS commands should be sanitized','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,20,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cwe,owasp-a1,sans-top25-insecure,security',0,'HTML'),(93,'S2197',NULL,'squid','<p>When the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for equality with a positive number (or a negative one) could result in unexpected results. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x % 2 == 1;  // Noncompliant; if x is an odd negative, x % 2 == -1\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isOdd(int x) {\n  return x %2 != 0;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/xAHAAQ\">CERT, NUM51-J.</a> - Do not assume that the remainder operator always returns a nonnegative result for integral operands\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQBi\">CERT, INT10-C</a> - Do not assume a positive remainder when using the % operator\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/_YBLAQ\">CERT, INT10-CPP.</a> - Do not assume a positive remainder when using the % operator\n</li></ul>',2,NULL,'Modulus results should not be checked for direct equality','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,suspicious',0,'HTML'),(94,'S2078',NULL,'squid','<p>Applications that execute LDAP queries should neutralize any externally-provided values in those commands. Failure to do so could allow an attacker to include input that changes the query so that unintended commands are executed, or sensitive data is exposed. Unhappily LDAP doesn\'t provide any prepared statement interfaces like SQL to easily remove this risk. So each time a LDAP query is built dynamically this rule logs an issue.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(requestedAttrs);  // Noncompliant\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n\n  String filter = \"(&amp;(objectClass=user)(sAMAccountName=\" + username + \"))\";\n\n  NamingEnumeration results = dctx.search(base,  // Noncompliant\n        filter,  // Noncompliant; parameter concatenated directly into string\n        sc);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic User lookupUser(String username, String base, String [] requestedAttrs) {\n\n  // ...\n  DirContext dctx = new InitialDirContext(env);\n\n  SearchControls sc = new SearchControls();\n  sc.setReturningAttributes(buildAttrFilter(requestedAttrs));  // Compliant; method presumably scrubs input\n  sc.setSearchScope(SearchControls.SUBTREE_SCOPE);\n  \n  String useBase = \"ou=People\";\n  if (! base.startsWith(useBase)) {\n    useBase = base;\n  }\n  \n  String filter = \"(&amp;(objectClass=user)(sAMAccountName=\" + username.replaceAll(\"[()| ]\",\"\") + \"))\";\n\n  NamingEnumeration results = dctx.search(useBase,  // Compliant; originally value used conditionally\n        filter,  // Compliant; parameter NOT concatenated directly into string\n        sc);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/90\">MITRE CWE-90</a> - Improper Neutralization of Special Elements used in an LDAP Query (\'LDAP Injection\')\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/CgLEAw\">CERT, IDS54-J.</a> - Prevent LDAP injection\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#LDAP_INJECTION\">Potential LDAP Injection</a>\n</li></ul>',3,NULL,'Values passed to LDAP queries should be sanitized','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,20,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cert,cwe,owasp-a1,security',0,'HTML'),(95,'S1301',NULL,'squid','<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 15.5 - Every switch statement shall have at least one case clause.\n</li><li> MISRA C++:2008, 6-4-8 - Every switch statement shall have at least one case-clause.\n</li><li> MISRA C:2012, 16.6 - Every switch statement shall have at least two switch-clauses\n</li></ul>',1,NULL,'\"switch\" statements should have at least 3 \"case\" clauses','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'misra',0,'HTML'),(96,'S109',NULL,'squid','<p>A magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the number of iterations of a loops, to test the value of a property, etc.</p>\n<p>Using magic numbers may seem obvious and straightforward when you\'re writing a piece of code, but they are much less obvious and straightforward at debugging time.</p>\n<p>That is why magic numbers must be demystified by first being assigned to clearly named variables before being used.</p>\n<p>-1, 0 and 1 are not considered magic numbers.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void doSomething() {\n	for(int i = 0; i &lt; 4; i++){                 // Noncompliant, 4 is a magic number\n		...\n	}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static final int NUMBER_OF_CYCLES = 4;\npublic static void doSomething() {\n  for(int i = 0; i &lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule ignores <code>hashCode</code> methods.</p>',1,NULL,'Magic numbers should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,35,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'brain-overload',0,'HTML'),(97,'S106',NULL,'squid','<p>When logging a message there are several important requirements which must be fulfilled:</p>\n<ul>\n<li> The user must be able to easily retrieve the logs\n</li><li> The format of all logged message must be uniform to allow the user to easily read the log\n</li><li> Logged data must actually be recorded\n</li><li> Sensitive data must only be logged securely\n</li></ul>\n<p>If a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That\'s why defining and using a dedicated logger is highly recommended.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(\"My Message\");  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(\"My Message\");\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/RoElAQ\">CERT, ERR02-J.</a> - Prevent exceptions while logging data\n</li></ul>',2,NULL,'Standard outputs should not be used directly to log anything','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,19,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bad-practice,cert',0,'HTML'),(98,'S2183',NULL,'squid','<p>Since an <code>int</code> is a 32-bit variable, shifting by more than (-)31 is confusing at best and an error at worst. Shifting an <code>int</code> by 32 is the same as shifting it by 0, and shifting it by 33 is the same as shifting it by 1.</p>\n<p>Similarly, shifting a <code>long</code> by (-)64 is the same as shifting it by 0, and shifting it by 65 is the same as shifting it by 1.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 48;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int shift(int a) {\n  return a &lt;&lt; 16;\n}\n</pre>',3,NULL,'Ints and longs should not be shifted by zero or more than their number of bits-1','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert',0,'HTML'),(99,'S2061',NULL,'squid','<p>Writers of <code>Serializable</code> classes can choose to let Java\'s automatic mechanisms handle serialization and deserialization, or they can choose to handle it themselves by implementing specific methods. However, if the signatures of those methods are not exactly what is expected, they will be ignored and the default serialization mechanisms will kick back in. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  void writeObject(java.io.ObjectOutputStream out)// Noncompliant; not private\n        throws IOException  \n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n  {...}\n\n  public void readObjectNoData()  // Noncompliant; not private \n  {...}\n\n  static Object readResolve() throws ObjectStreamException  // Noncompliant; this method may have any access modifier, may not be static\n\n  Watermelon writeReplace() throws ObjectStreamException // Noncompliant; this method may have any access modifier, but must return Object\n  {...}\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Watermelon implements Serializable {\n  // ...\n  private void writeObject(java.io.ObjectOutputStream out) \n        throws IOException \n  {...}\n\n  private void readObject(java.io.ObjectInputStream in)\n        throws IOException, ClassNotFoundException\n  {...}\n\n  private void readObjectNoData()\n        throws ObjectStreamException\n  {...}\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  private Object writeReplace() throws ObjectStreamException\n  {...}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/4gAMAg\">CERT, SER01-J.</a> - Do not deviate from the proper signatures of serialization methods\n</li></ul>',3,NULL,'Custom serialization method signatures should meet requirements','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert',0,'HTML'),(100,'S2184',NULL,'squid','<p>When arithmetic is performed on <code>int</code>s, the result will always be an <code>int</code>. You can assign that result to a <code>long</code>, <code>double</code>, or <code>float</code> with automatic type conversion, but having started as an <code>int</code>, the result will likely not be what you expect. </p>\n<p>For instance, if the result of <code>int</code> division is assigned to a floating-point variable, precision will have been lost before the assignment. Likewise, if the result of multiplication is assigned to a <code>long</code>, it may have already overflowed before the assignment.</p>\n<p>In either case, the result will not be what was expected. Instead, at least one operand should be cast or promoted to the final type before the operation takes place.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat twoThirds = 2/3; // Noncompliant; int division. Yields 0.0\nlong millisInYear = 1_000*3_600*24*365; // Noncompliant; int multiplication. Yields 1471228928\nlong bigNum = Integer.MAX_VALUE + 2; // Noncompliant. Yields -2147483647\nlong bigNegNum =  Integer.MIN_VALUE-1; //Noncompliant, gives a positive result instead of a negative one. \nDate myDate = new Date(seconds * 1_000); //Noncompliant, won\'t produce the expected result if seconds &gt; 2_147_483\n...\npublic long compute(int factor){\n  return factor * 10_000;  //Noncompliant, won\'t produce the expected result if factor &gt; 214_748\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfloat twoThirds = 2f/3; // 2 promoted to float. Yields 0.6666667\nlong millisInYear = 1_000L*3_600*24*365; // 1000 promoted to long. Yields 31_536_000_000\nlong bigNum = Integer.MAX_VALUE + 2L; // 2 promoted to long. Yields 2_147_483_649\nlong bigNegNum =  Integer.MIN_VALUE-1L; // Yields -2_147_483_649\nDate myDate = new Date(seconds * 1_000L);\n...\npublic long compute(int factor){\n  return factor * 10_000L;\n}\n</pre>\n<p>or</p>\n<pre>\nfloat twoThirds = (float)2/3; // 2 cast to float\nlong millisInYear = (long)1_000*3_600*24*365; // 1_000 cast to long\nlong bigNum = (long)Integer.MAX_VALUE + 2;\nlong bigNegNum =  (long)Integer.MIN_VALUE-1;\nDate myDate = new Date((long)seconds * 1_000);\n...\npublic long compute(long factor){\n  return factor * 10_000;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/190\">MITRE, CWE-190</a> - Integer Overflow or Wraparound\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/woIyAQ\">CERT, NUM50-J.</a> - Convert integers to floating point for floating-point operations\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/AxE\">CERT, INT18-C.</a> - Evaluate integer expressions in a larger size before comparing or assigning to that size\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/1IAyAQ\">CERT, INT18-CPP.</a> - Evaluate integer expressions in a larger size before comparing or assigning to that size\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Risky Resource Management\n</li></ul>',3,NULL,'Math operands should be cast before assignment','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert,cwe,sans-top25-risky',0,'HTML'),(101,'S2063',NULL,'squid','<p>A non-serializable <code>Comparator</code> can prevent an otherwise-<code>Serializable</code> ordered collection from being serializable. Since the overhead to make a <code>Comparator</code> serializable is usually low, doing so can be considered good defensive programming.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class FruitComparator implements Comparator&lt;Fruit&gt;, Serializable {\n  private static final long serialVersionUID = 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n</pre>',2,NULL,'Comparators should be \"Serializable\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall,serialization',0,'HTML'),(102,'S1656',NULL,'squid','<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake and some other value or variable was intended for the assignment instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',3,NULL,'Variables should not be self-assigned','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'3min',NULL,NULL,'bug,cert',0,'HTML'),(103,'ParsingError','S2260','squid','<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number of files that do not parse but also to easily find out why they do not parse.</p>',2,NULL,'Java parser failure','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'suspicious',0,'HTML'),(104,'ObjectFinalizeCheck','S1111','squid','<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/586.html\">MITRE, CWE-586</a> - Explicit Call to Finalize()\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers\n</li></ul>',3,NULL,'The Object.finalize() method should not be called','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe,security',0,'HTML'),(105,'S2066',NULL,'squid','<p>Serializing a non-<code>static</code> inner class will result in an attempt at serializing the outer class as well. If the outer class is not serializable, then serialization will fail, resulting in a runtime error. </p>\n<p>Making the inner class <code>static</code> (i.e. \"nested\") avoids this problem, therefore inner classes should be <code>static</code> if possible. However, you should be aware that there are semantic differences between an inner class and a nested one: </p>\n<ul>\n<li> an inner class can only be instantiated within the context of an instance of the outer class. \n</li><li> a nested (<code>static</code>) class can be instantiated independently of the outer class.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public class Seed implements Serializable {  // Noncompliant; serialization will fail\n    // ...\n  }\n} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Pomegranate {\n  // ...\n\n  public static class Seed implements Serializable {\n    // ...\n  }\n} \n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/O4CpAQ\">CERT SER05-J.</a> - Do not serialize instances of inner classes\n</li></ul>',3,NULL,'\"Serializable\" inner classes of non-serializable classes should be \"static\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert,serialization',0,'HTML'),(106,'S2065',NULL,'squid','<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class that does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>',1,NULL,'Fields in non-serializable classes should not be \"transient\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'serialization,unused',0,'HTML'),(107,'S2068',NULL,'squid','<p>Because it is easy to extract strings from a compiled application, credentials should never be hard-coded. Do so, and they\'re almost guaranteed to end up in the hands of an attacker. This is particularly true for applications that are distributed.</p>\n<p>Credentials should be stored outside of the code in a strongly-protected encrypted configuration file or database.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=steve&amp;password=blue\"); // Noncompliant\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/qQCHAQ\">CERT, MSC03-J.</a> - Never hard code sensitive information\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a>\n</li></ul>',3,NULL,'Credentials should not be hard-coded','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cert,cwe,owasp-a2,sans-top25-porous,security',0,'HTML'),(108,'AssignmentInSubExpressionCheck','S1121','squid','<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable.</p>\n<p>It is also a common mistake to write <code>=</code> when <code>==</code> was meant.</p>\n<p>Ideally, expressions should not have side-effects.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndoSomething(i = 42);\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ni = 42;\ndoSomething(i);   \n// or\ndoSomething(i == 42);  // Perhaps in fact the comparison operator was expected\n</pre>\n\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are allowed.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre> \n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.1 - Assignment operators shall not be used in expressions that yield a Boolean value\n</li><li> MISRA C++:2008, 6-2-1 - Assignment operators shall not be used in sub-expressions\n</li><li> MISRA C:2012, 13.4 - The result of an assignment operator should not be used\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/nYFtAg\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/1gCTAw\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/KQvhAg\">CERT, EXP19-CPP.</a> - Do not perform assignments in conditional expressions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/KYIyAQ\">CERT, MSC02-CPP.</a> - Avoid errors of omission\n</li></ul>',2,NULL,'Assignments should not be made from within sub-expressions','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,cwe,misra,suspicious',0,'HTML'),(109,'S1774',NULL,'squid','<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more verbose <code>if</code>/<code>else</code> structure.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>',2,NULL,'The ternary operator should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'brain-overload',0,'HTML'),(110,'S138',NULL,'squid','<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will not only be easier to understand, but also probably easier to test.</p>',2,NULL,'Methods should not have too many lines','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'brain-overload',0,'HTML'),(111,'S1160',NULL,'squid','<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them.</p>\n<p>This makes those exceptions fully part of the API of the method.</p>\n<p>To keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>',2,NULL,'Public methods should throw at most one checked exception','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'error-handling',0,'HTML'),(112,'S135',NULL,'squid','<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming. </p>\n<p>One <code>break</code> and <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more than one, the code should be refactored to increase readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>',2,NULL,'Loops should not contain more than a single \"break\" or \"continue\" statement','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'LINEAR',NULL,'20min',NULL,NULL,'per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement',NULL,'brain-overload',0,'HTML'),(113,'S1161',NULL,'squid','<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n<li> It elicits a warning from the compiler if the annotated method doesn\'t actually override anything, as in the case of a misspelling.\n</li><li> It improves the readability of the source code by making it obvious that methods are overridden.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>',2,NULL,'\"@Override\" annotation should be used on any method overriding (since Java 5) or implementing (since Java 6) another one','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bad-practice',0,'HTML'),(114,'S2251',NULL,'squid','<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually reach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/zYEzAg\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters\n</li></ul>',4,NULL,'A \"for\" loop update clause should move the counter in the right direction','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert',0,'HTML'),(115,'S2130',NULL,'squid','<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method instead. It will be clearer and more efficient.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = new Float(myNum).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n</pre>',2,NULL,'Parsing should be used to convert \"Strings\" to primitives','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'performance',0,'HTML'),(116,'S1162',NULL,'squid','<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe that checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}   \n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>',2,NULL,'Checked Exception should not be thrown','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1h',NULL,NULL,'error-handling',0,'HTML'),(117,'S2250',NULL,'squid','<p>For most collections the <code>size()</code> method requires constant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is directly proportional to the number of elements in the queue. When the queue is large, this could therefore be an expensive operation. Further, the results may be inaccurate if the queue is modified during execution.</p>\n<p>By the way, if the <code>size()</code> is used only to check that the collection is empty, then the <code>isEmpty()</code> method should be used. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");\n</pre>',3,NULL,'\"ConcurrentLinkedQueue.size()\" should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'performance,security',0,'HTML'),(118,'LowerCaseLongSuffixCheck','S1129','squid','<p>The long suffix should always be written in uppercase, i.e. \'L\', as the lowercase \'l\' can easily be confused with the digit one \'1\'.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong n = 10l;  // Noncompliant; easily confused with one zero one\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlong n = 10L; \n</pre>\n\n<h2>See Also</h2>\n<ul>\n<li> {rule:squid:S818} - Literal suffixes should be upper case\n</li></ul>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S818} instead.</p>',1,NULL,'Long suffix \"L\" should be upper case','DEPRECATED','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(119,'MissingDeprecatedCheck','S1123','squid','<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as IDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be refactored.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo2() {\n  }\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to it.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>',2,NULL,'Deprecated elements should have both the annotation and the Javadoc tag','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bad-practice,obsolete',0,'HTML'),(120,'S1602',NULL,'squid','<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>',2,NULL,'Lamdbas containing only one statement should not nest this statement in a block','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'java8',0,'HTML'),(121,'S1844',NULL,'squid','<p>From the Java API documentation:</p>\n<blockquote>\n<p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>) into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations. Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore, calling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition(); \n...\nnotFull.wait();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition(); \n...\nnotFull.await();\n</pre>',2,NULL,'\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'suspicious',0,'HTML'),(122,'S1724',NULL,'squid','<p>Deprecated classes and interfaces should be avoided, rather than used, inherited or extended. Deprecation is a warning that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */@Deprecated\nclass Foo { ... }\n\nclass Bar extends Foo { ... }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Bar extends Fee { ... }\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions\n</li></ul>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S1874} instead.</p>',2,NULL,'Deprecated classes and interfaces should not be extended/implemented','DEPRECATED','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cwe,obsolete',0,'HTML'),(123,'S1604',NULL,'squid','<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may seem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.map(element -&gt; new StringBuilder(element).reverse().toString());\n</pre>',2,NULL,'Anonymous inner classes containing only one method should become lambdas','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'java8',0,'HTML'),(124,'S1848',NULL,'squid','<p>There is no good reason to create a new object to not do anything with it. Most of the time, this is due to a missing piece of code and so could lead to an unexpected behavior in production.</p>\n<p>If it was done on purpose because the constructor has side-effects, then that side-effect code should be moved into a separate, static method and called directly.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>',3,NULL,'Objects should not be created to be dropped immediately without being used','DEPRECATED','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(125,'S1849',NULL,'squid','<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator. <code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the <code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>',4,NULL,'\"Iterator.hasNext()\" should not call \"Iterator.next()\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug',0,'HTML'),(126,'LeftCurlyBraceEndLineCheck','S1105','squid','<p>Sharing some coding conventions is a key point to make it possible for a team to efficiently collaborate. This rule make it mandatory to place open curly braces at the end of lines of code.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();} \n</pre>',1,NULL,'An open curly brace should be located at the end of a line','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(127,'S1163',NULL,'squid','<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>The masked\'s exception message and stack trace will be lost.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; will mask the IllegalArgumentException\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */                                         // Compliant\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/soUbAQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block\n</li></ul>',2,NULL,'Exceptions should not be thrown in finally blocks','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cert,error-handling,suspicious',0,'HTML'),(128,'S2253',NULL,'squid','<p>This rule allows banning certain methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n<li> className:java.lang.String\n</li><li> methodName: replace\n</li><li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence\n</li></ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>',2,NULL,'Disallowed methods should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,'HTML'),(129,'S2252',NULL,'squid','<p>If a <code>for</code> loop\'s condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always bugs, particularly when the initial value and stop conditions are hard-coded.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant \n  // ...\n</pre>',3,NULL,'Loop conditions should be true at least once','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bug',0,'HTML'),(130,'S2131',NULL,'squid','<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that\'s done purely to use the wrapper class\' <code>toString</code> method, it\'s a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a class instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code> argument should be avoided, as should concatenating empty string <code>\"\"</code> to a primitive.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = new Integer(myInt).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\nmyIntString = 4 + \"\";  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>',2,NULL,'Primitives should not be boxed just for \"String\" conversion','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'performance',0,'HTML'),(131,'S1165',NULL,'squid','<p>Exceptions are meant to represent the application\'s state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n<li> Will be fully defined at the same time the <code>Exception</code> is instantiated.\n</li><li> Won\'t be updated or corrupted by a questionable error handler.\n</li></ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>',2,NULL,'Exception classes should be immutable','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'error-handling',0,'HTML'),(132,'S2134',NULL,'squid','<p>According to the Java API documentation:</p>\n<blockquote>\n<p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n<p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn\'t make sense, and implies that the contract of the <code>Thread</code> class is not well understood.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}  \n</pre>',2,NULL,'Classes extending java.lang.Thread should override the \"run\" method','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'multi-threading,pitfall',0,'HTML'),(133,'S1166',NULL,'squid','<p>When handling a caught exception, the original exception\'s message and stack trace should be logged or passed forward.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n // Noncompliant - exception is lost\ntry { /* ... */ } catch (Exception e) { LOGGER.info(\"context\"); }   \n\n// Noncompliant - exception is lost (only message is preserved)       \ntry { /* ... */ } catch (Exception e) { LOGGER.info(e.getMessage()); }   \n\n// Noncompliant - exception is lost \ntry { /* ... */ } catch (Exception e) { throw new RuntimeException(\"context\"); }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (Exception e) { LOGGER.info(e); }   \n\ntry { /* ... */ } catch (Exception e) { throw new RuntimeException(e); }\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;\n} catch (Exception e) {\n  // Conversion into unchecked exception is also allowed\n  throw new RuntimeException(e);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>ParseException</code> and <code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are correctly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/6gEqAQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions\n</li></ul>',2,NULL,'Exception handlers should preserve the original exceptions','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cert,error-handling,suspicious',0,'HTML'),(134,'S2254',NULL,'squid','<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n<p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually updating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value\'\'\'\"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G. Tomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered  unauthenticated. Moreover, this session ID should never be logged to prevent hijacking of active sessions.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#SERVLET_SESSION_ID\">Untrusted Session Cookie Value</a>\n</li></ul>',3,NULL,'\"HttpServletRequest.getRequestedSessionId()\" should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cwe,owasp-a2,sans-top25-porous,security',0,'HTML'),(135,'S2133',NULL,'squid','<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class\' <code>.class</code> property.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass(); \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class; \n</pre>',2,NULL,'Objects should not be created only to \"getClass\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'performance',0,'HTML'),(136,'S2257',NULL,'squid','<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has been protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li><li> <a href=\"http://www.sans.org/top25-software-errors/\">SANS Top 25</a> - Porous Defenses\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n</li></ul>',4,NULL,'Only standard cryptographic algorithms should be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1d',NULL,NULL,'cwe,owasp-a6,sans-top25-porous,security',0,'HTML'),(137,'S1168',NULL,'squid','<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more complex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n  \n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/AgG7AQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array over a null value\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/zwHEAw\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for methods that return an array or collection\n</li></ul>',2,NULL,'Empty arrays and collections should be returned instead of null','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cert',0,'HTML'),(138,'S2258',NULL,'squid','<p>By contract, the <code>NullCipher</code> class provides an \"identity cipher\" <del></del> one that does not transform or encrypt the plaintext in any way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc=new NullCipher();\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#NULL_CIPHER\">NullCipher Unsafe</a>\n</li></ul>',4,NULL,'\"javax.crypto.NullCipher\" should not be used for anything other than testing','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cwe,owasp-a6,sans-top25-porous,security',0,'HTML'),(139,'S00101','S101','squid','<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all class names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass my_class {...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {...}\n</pre>',1,NULL,'Class names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention',0,'HTML'),(140,'S128',NULL,'squid','<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While this is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2:  // Both \'doSomething()\' and \'doSomethingElse()\' will be executed. Is it on purpose ?\n    doSomething();\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:                              \n    foo();\n    break;\n  case 2: \n    doSomething();\n    break;\n  default:                               \n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:                               \n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  default:                               // For the last case, use of break statement is optional \n    doSomethingElse();\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n</li><li> MISRA C:2004, 15.2 - An unconditional break statement shall terminate every non-empty switch clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-5 - An unconditional throw or break statement shall terminate every non-empty switch-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.3 - An unconditional break statement shall terminate every switch-clause\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/YIFLAQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a break statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZoFLAQ\">CERT, MSC18-CPP.</a> - Finish every set of statements associated with a case label with a break statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/ewHAAQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a break statement\n</li></ul>',2,NULL,'Switch cases should end with an unconditional \"break\" statement','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cert,cwe,misra,suspicious',0,'HTML'),(141,'S00100','S100','squid','<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With default provided regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic int DoSomething(){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int doSomething(){...}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Overriding methods are excluded. </p>\n<pre> \n@Override \npublic int Do_Something(){...} \n</pre>',1,NULL,'Method names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention',0,'HTML'),(142,'MethodCyclomaticComplexity','S1541','squid','<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>',2,NULL,'Methods should not be too complex','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'LINEAR_OFFSET',NULL,'1min',NULL,'10min','per complexity point above the threshold',NULL,'brain-overload',0,'HTML'),(143,'S1150',NULL,'squid','<p>From the official Oracle Javadoc:</p>\n<blockquote>\n<p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>',2,NULL,'Enumeration should not be implemented','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'obsolete',0,'HTML'),(144,'S1151',NULL,'squid','<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code> clause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of <code>case</code> clause should be extracted in a dedicated method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:                  \n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>',2,NULL,'\"switch case\" clauses should not have too many lines','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'brain-overload',0,'HTML'),(145,'S1710',NULL,'squid','<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that\'s no longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>',2,NULL,'Annotation repetitions should not be wrapped','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'java8',0,'HTML'),(146,'S134',NULL,'squid','<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements is a key ingredient for making what\'s known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>',2,NULL,'Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,36,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'brain-overload',0,'HTML'),(147,'S1153',NULL,'squid','<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>',1,NULL,'String.valueOf() should not be appended to a String','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(148,'S2123',NULL,'squid','<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++; \n  return ++j; \n}\n</pre>',3,NULL,'Values should not be uselessly incremented','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(149,'LabelsShouldNotBeUsedCheck','S1119','squid','<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage make the control flow harder to follow, which reduces the code\'s readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>',2,NULL,'Labels should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'confusing',0,'HTML'),(150,'S1155',NULL,'squid','<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can be more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations of <code>size()</code> can be <code>O(n)</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>',2,NULL,'Collection.isEmpty() should be used to test for emptiness','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy',0,'HTML'),(151,'S2122',NULL,'squid','<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>\'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code> to zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>',4,NULL,'\"ScheduledThreadPoolExecutor\" should not have 0 core threads','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug',0,'HTML'),(152,'S1157',NULL,'squid','<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation of temporary, intermediate <code>String</code> objects.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>',2,NULL,'Case insensitive string comparisons should be made without intermediate upper or lower casing','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(153,'S2245',NULL,'squid','<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that will be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code> method should not be used for security-critical applications or for protecting sensitive data. In such context, the <code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom random = new Random();\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/338.html\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/310\">MITRE, CWE-310</a> - Cryptographic Issues\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/mAFqAQ\">CERT, MSC02-J.</a> - Generate strong random numbers\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/qw4\">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom numbers\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/WYIyAQ\">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom numbers\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number Generator</a>\n</li></ul>',3,NULL,'Pseudorandom number generators (PRNGs) should not be used in secure contexts','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cert,cwe,owasp-a6,security',0,'HTML'),(154,'S1158',NULL,'squid','<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is inefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>',2,NULL,'Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(155,'S2127',NULL,'squid','<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the mathematical conversion into a <code>double</code> simply won\'t work as anticipated because the layout of the bits will be interpreted incorrectly, as if a child were trying to use an adult\'s gloves.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>',4,NULL,'\"Double.longBitsToDouble\" should not be used for \"int\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug',0,'HTML'),(156,'S1181',NULL,'squid','<p><code>Throwable</code> is the superclass of all errors and exceptions in Java.</p>\n<p><code>Error</code> is the superclass of all errors, which are not meant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from which an application should not attempt to recover.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }  \ntry { /* ... */ } catch (Error e) { /* ... */ }   \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/BIB3AQ\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors\n</li></ul>',4,NULL,'Throwable and Error should not be caught','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe,error-handling,security',0,'HTML'),(157,'S1182',NULL,'squid','<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding <code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise, it\'s probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle\'s Javadoc is:</p>\n<ol>\n<li> <code>x.clone() != x</code>\n</li><li> <code>x.clone().getClass() == x.getClass()</code>\n</li><li> <code>x.clone().equals\\(x\\)</code>\n</li></ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n<li> <code>super.clone()</code> returns a new object instance\n</li><li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on\n</li><li> <code>Object.clone()</code> performs a shallow copy of the object\'s state\n</li></ol>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/580.html\">MITRE, CWE-580</a> - clone() Method Without super.clone()\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/CQHEAw\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone()\n</li></ul>',2,NULL,'Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe',0,'HTML'),(158,'S2273',NULL,'squid','<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a thread that is the owner of the object\'s monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule reinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>',3,NULL,'\"wait(...)\", \"notify()\" and \"notifyAll()\" methods should only be called when a lock is obviously held on an object','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,multi-threading',0,'HTML'),(159,'S2272',NULL,'squid','<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception when the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this <code>Iterator</code>. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>',2,NULL,'\"Iterator.next()\" methods should throw \"NoSuchElementException\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'unpredictable',0,'HTML'),(160,'S2151',NULL,'squid','<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and <code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n<p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers\n</li></ul>',4,NULL,'\"runFinalizersOnExit\" should not be called','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,cert,security',0,'HTML'),(161,'HiddenFieldCheck','S1117','squid','<p>Shadowing fields with a local variable is a bad practice that reduces code readability: It makes it confusing to know whether the field or the variable is being used.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/2ADEAw\">CERT, DCL51-J.</a> - Do not shadow or obscure identifiers in subscopes\n</li></ul>',2,NULL,'Local variables should not shadow class fields','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,pitfall',0,'HTML'),(162,'UndocumentedApi','S1176','squid','<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way to understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>The following Javadoc elements are required:</p>\n<ul>\n<li> Parameters, using <code>@param parameterName</code>.\n</li><li> Method return values, using <code>@return</code>.\n</li><li> Generic types, using <code>@param &lt;T&gt;</code>.\n</li></ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n<li> Getters and setters.\n</li><li> Methods with @Override annotation.\n</li><li> Empty constructors.\n</li><li> Static constants.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing \'@param &lt;T&gt;\'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; ...\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * @param value ...\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>',1,NULL,'Public types, methods and fields (API) should be documented with Javadoc','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'convention',0,'HTML'),(163,'S1185',NULL,'squid','<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time this is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such overrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {                \n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {      \n  return super.isLegal(action);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>',1,NULL,'Overriding methods should do more than simply call the same method in the super class','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy',0,'HTML'),(164,'S2275',NULL,'squid','<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors that lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code> and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an \'int\' is expected rather than a String\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Duke\'s Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument \'2\' is unused\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument \'3\' is unused\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index \'&lt;\' refers to the previous format specifier but there isn\'t one\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It\'s better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Duke\'s Birthday year is %tY\", c);\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"%d is equals to %&lt;\", 2);\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\"; \n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/e4EyAQ\">CERT, FIO00-CPP.</a> - Take care when creating format strings\n</li></ul>',3,NULL,'Printf-style format strings should not lead to unexpected behavior at runtime','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bug,cert,pitfall',0,'HTML'),(165,'S2154',NULL,'squid','<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both values will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible type.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>',3,NULL,'Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(166,'S1186',NULL,'squid','<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n<li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production.\n</li><li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown.\n</li><li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override.\n</li><li> There is a desire to provide a public, no-args constructor. In this case, it can simply be omitted from the code; a default constructor will automatically be generated.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>An abstract class may have empty methods, in order to provide default implementations for child classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {\n  }\n}\n</pre>',2,NULL,'Methods should not be empty','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'suspicious',0,'HTML'),(167,'S1065',NULL,'squid','<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2012, 2.6 - A function should not contain unused label declarations\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',2,NULL,'Unused labels should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,misra,unused',0,'HTML'),(168,'S2274',NULL,'squid','<p>According to the Java <code>Condition</code> interface documentation:</p>\n<blockquote>\n<p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n<p>waits should always occur in loops, like this one:</p>\n<pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout); \n  }\n   ... // Perform action appropriate to condition\n}\n</pre> \n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wakeup whereas the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/9QIhAQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop\n</li></ul>',3,NULL,'\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,cert,multi-threading',0,'HTML'),(169,'S2153',NULL,'squid','<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code> value. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there\'s no point in doing either when not needed. This also applies to autoboxing and auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) { \n  //... \n}\n\npublic void examineInteger(Integer a) { \n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n}\n</pre>',2,NULL,'Boxing and unboxing should not be immediately reversed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(170,'S1066',NULL,'squid','<p>Merging collapsible <code>if</code> statements increases the code\'s readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) { \n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>',2,NULL,'Collapsible \"if\" statements should be merged','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(171,'S2277',NULL,'squid','<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an issue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/780.html\">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a>: Use of a Broken or Risky Cryptographic Algorithm\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A5-Security_Misconfiguration\">OWASP Top Ten 2013 Category A5</a> - Security Misconfiguration\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe</a>\n</li></ul>',3,NULL,'Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cwe,owasp-a5,owasp-a6,sans-top25-porous,security',0,'HTML'),(172,'S2156',NULL,'squid','<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code> members, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a <code>final</code> class <code>protected</code> is confusingly pointless.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>',2,NULL,'\"final\" classes should not have \"protected\" members','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'confusing',0,'HTML'),(173,'S1067',NULL,'squid','<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code> operators it contains.</p>\n<p>A single expression\'s complexity should not become too high to keep the code readable.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... } \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }     \n</pre>',2,NULL,'Expressions should not be too complex','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'LINEAR_OFFSET',NULL,'1min',NULL,'5min','per complexity point above the threshold',NULL,'brain-overload',0,'HTML'),(174,'S1188',NULL,'squid','<p>Anonymous classes and lambdas (with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner classes and lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become unreadable.</p>',2,NULL,'Lambdas and anonymous classes should not have too many lines','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'java8',0,'HTML'),(175,'S2276',NULL,'squid','<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance, and scalability issues, or even worse to deadlocks because the execution of the thread holding the lock is frozen. It\'s better to call <code>wait(...)</code> on the monitor object to temporarily release the lock and allow other threads to run.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/FgG7AQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a lock\n</li></ul>',3,NULL,'\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,multi-threading,performance,security',0,'HTML'),(176,'S1068',NULL,'squid','<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will improve maintainability because developers will not wonder what the variable is used for.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that must be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn\'t raise any issue on annotated fields.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',2,NULL,'Unused \"private\" fields should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,unused',0,'HTML'),(177,'S1860',NULL,'squid','<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock with unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects because they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there are only two instances of <code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the two.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/rQGeAQ\">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused\n</li></ul>',4,NULL,'Synchronization should not be based on Strings or boxed primitives','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert,multi-threading',0,'HTML'),(178,'S2278',NULL,'squid','<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n<p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer provides the security that is needed to protect federal government information.</p>\n<p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE CWE-326</a> - Inadequate Encryption Strength\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/VwAZAg\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms\n</li><li> Derived from FindSecBugs rule <a href=\"http://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a>\n</li></ul>',3,NULL,'Neither DES (Data Encryption Standard) nor DESede (3DES) should be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe,owasp-a6,sans-top25-porous,security',0,'HTML'),(179,'S2157',NULL,'squid','<p>Simply implementing <code>Cloneable</code>  without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While the <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability. Otherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e. without overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a class to be copied.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() { \n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>',3,NULL,'\"Cloneables\" should implement \"clone\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug',0,'HTML'),(180,'S1862',NULL,'squid','<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first one with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it\'s simply dead code and at worst, it\'s a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',3,NULL,'Related \"if/else if\" statements should not have the same condition','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bug,cert,pitfall,unused',0,'HTML'),(181,'S2039',NULL,'squid','<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don\'t expect, and potentially leave it open to unexpected modification by other classes. </p>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>',3,NULL,'Member variable visibility should be specified','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'security',0,'HTML'),(182,'S1170',NULL,'squid','<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every instance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code>  field isn\'t also <code>static</code>, it implies that different instances can have different values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such fields should either be made <code>static</code> or initialized in the constructor.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;   \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n<p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7) or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>',1,NULL,'Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(183,'S1171',NULL,'squid','<p>Non-static initializers are rarely used, and can be confusing for most developers.</p>\n<p>When possible, they should be refactored into standard constructors or field initializers.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>',2,NULL,'Only static class initializers should be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'pitfall',0,'HTML'),(184,'S1172',NULL,'squid','<p>Unused parameters are misleading. Whatever the value passed to such parameters is, the behavior will be the same.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) { \n  compute(a);\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Override and implementation methods are excluded, as are parameters annotated with <code>@Observes</code>, and methods that are intended to be overridden.</p>\n<pre>\n@override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 0-1-11 - There shall be no unused parameters (named or unnamed) in nonvirtual functions.\n</li><li> MISRA C:2012, 2.7 - There should be no unused parameters in functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',2,NULL,'Unused method parameters should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,misra,unused',0,'HTML'),(185,'S1294',NULL,'squid','<p>Since arrays do not override <code>Object.equals()</code>, calling equals on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>. </p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. To prevent such a misunderstanding, the \'==\' operator or <code>Arrays.equals(array1, array2)</code> must always be used in place of the <code>Array.equals(Object obj)</code> method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(array1.equals(array2)){...}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(Arrays.equals(array1, array2)){...}\n</pre>\n<p>or</p>\n<pre>\nif(array1 == array2){...}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods\n</li></ul>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S2159} instead.</p>',3,NULL,'The Array.equals(Object obj) method should not be used','DEPRECATED','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(186,'S1609',NULL,'squid','<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as <code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and <code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or Method references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would break the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>',2,NULL,'@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'java8',0,'HTML'),(187,'ClassCyclomaticComplexity','S1311','squid','<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>, <code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>, <code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance initializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the time, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several classes.</p>',2,NULL,'Classes should not be too complex','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'LINEAR_OFFSET',NULL,'1min',NULL,'10min','per complexity point over the threshold',NULL,'brain-overload',0,'HTML'),(188,'S1611',NULL,'squid','<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single parameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>',1,NULL,'Parentheses should be removed from a single lambda input parameter when its type is inferred','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'java8',0,'HTML'),(189,'S1612',NULL,'squid','<p>Method/constructor references are more compact and readable than using lambdas, and are therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(n -&gt; { System.out.println(n); });\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();\n  list.add(0);\n  list.add(1);\n  list.add(2);\n\n  list.forEach(System.out::println);\n</pre>',1,NULL,'Lambdas should be replaced with method references','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'java8',0,'HTML'),(190,'S1174',NULL,'squid','<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/H4cbAQ\">CERT, MET12-J.</a> - Do not use finalizers\n</li></ul>',2,NULL,'\"Object.finalize()\" should remain protected (versus public) when overriding','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'cert,cwe,security',0,'HTML'),(191,'S1175',NULL,'squid','<p><code>Object.finalize()</code> is called by the Garbage Collector sometime after the object becomes unreferenced.</p>\n<p>Overloading this method is misleading:</p>\n<ul>\n<li> The overload will not be called by the Garbage Collector.\n</li><li> Users are not expected to call <code>Object.finalize()</code> and will get confused.\n</li></ul>\n<p>Another name should be picked for the method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>',2,NULL,'The signature of \"finalize()\" should match that of \"Object.finalize()\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'pitfall',0,'HTML'),(192,'S2386',NULL,'squid','<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>. Such variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters, should be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on the mutability of the internal state of the array (i.e. it doesn\'t accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/rwBc\">CERT, OBJ01-J.</a> - Limit accessibility of fields\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n</li></ul>',3,NULL,'Mutable fields should not be \"public static\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,18,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,cwe,security,unpredictable',0,'HTML'),(193,'S1850',NULL,'squid','<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding which could lead to unexpected behavior in production.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False\n</li></ul>',2,NULL,'\"instanceof\" operators that always return \"true\" or \"false\" should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cwe,suspicious',0,'HTML'),(194,'S2388',NULL,'squid','<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can be confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called explicitly, using <code>super.</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>',2,NULL,'Inner class calls to super class methods should be unambiguous','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(195,'S1610',NULL,'squid','<p>With Java 8\'s \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>',2,NULL,'Abstract classes without fields should be converted to interfaces','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'java8',0,'HTML'),(196,'S1481',NULL,'squid','<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will not wonder what the variable is used for.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used \n  return hours * 60;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>',2,NULL,'Unused local variables should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'unused',0,'HTML'),(197,'SwitchLastCaseIsDefaultCheck','S131','squid','<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a suitable comment as to why no action is taken. Even when the <code>switch</code> covers all current values of an <code>enum</code>, a <code>default</code> case should still be used because there is no guarantee that the <code>enum</code> won\'t be extended.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 15.0 - The MISRA C <em>switch</em> syntax shall be used.\n</li><li> MISRA C:2004, 15.3 - The final clause of a switch statement shall be the default clause\n</li><li> MISRA C++:2008, 6-4-3 - A switch statement shall be a well-formed switch statement.\n</li><li> MISRA C++:2008, 6-4-6 - The final clause of a switch statement shall be the default-clause\n</li><li> MISRA C:2012, 16.1 - All switch statements shall be well-formed\n</li><li> MISRA C:2012, 16.4 - Every <em>switch</em> statement shall have a <em>default</em> label\n</li><li> MISRA C:2012, 16.5 - A <em>default</em> label shall appear as either the first or the last <em>switch label</em> of a <em>switch</em> statement\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/YgE\">CERT, MSC01-C.</a> - Strive for logical completeness\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JoIyAQ\">CERT, MSC01-CPP.</a> - Strive for logical completeness\n</li></ul>',2,NULL,'\"switch\" statements should end with \"default\" clauses','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,cwe,misra',0,'HTML'),(198,'CallToDeprecatedMethod','S1874','squid','<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning that the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away from the aging, soon-to-be-retired technology.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */@Deprecated\nclass Fum { ... }\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn\'t deprecated\n    foo.doTheThing();  // Noncompliant\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/KgAVAg\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods\n</li></ul>',1,NULL,'\"@Deprecated\" code should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,11,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,cwe,obsolete',0,'HTML'),(199,'CallToFileDeleteOnExitMethod','S2308','squid','<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n<li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed.\n</li><li> For each file handler, the memory associated to the handler is released only at the end of the process.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>',2,NULL,'\"deleteOnExit\" should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'performance',0,'HTML'),(200,'S1244',NULL,'squid','<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is not associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be different based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values is almost always an error, and the use of other comparison operators (<code>&gt;</code>, <code>&gt;=</code>, <code>&lt;</code>, <code>&lt;=</code>) is also problematic because they don\'t work properly for -0 and <code>NaN</code>. </p>\n<p>Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider using one of Java\'s float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third option is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored value and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code> for instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre> \nfloat myNumber = 3.146; \nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false \n  // ... \n} \nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true \n  // ... \n} \n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.3 - Floating-point expressions shall not be tested for equality or inequality.\n</li><li> MISRA C++:2008, 6-2-2 - Floating-point expressions shall not be directly or indirectly tested for equality or inequality\n</li></ul>',3,NULL,'Floating point numbers should not be tested for equality','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,misra',0,'HTML'),(201,'RightCurlyBraceSameLineAsNextBlockCheck','S1107','squid','<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or <code>finally</code> keywords.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>',1,NULL,'Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(202,'S2333',NULL,'squid','<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically <code>public static final</code>. There is no need to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, and <code>private</code> is redundant on the constructor of an <code>Enum</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>',1,NULL,'Redundant modifiers should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy,finding',0,'HTML'),(203,'S1125',NULL,'squid','<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }        \nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>',1,NULL,'Boolean literals should not be redundant','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy',0,'HTML'),(204,'S1488',NULL,'squid','<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this variable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to know exactly what will be returned.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>',1,NULL,'Local Variables should not be declared and then immediately returned or thrown','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy',0,'HTML'),(205,'S1126',NULL,'squid','<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (expression) {  \n  return true;\n} else {\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn expression; \n</pre>',1,NULL,'Return of boolean expressions should not be wrapped into an \"if-then-else\" statement','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy',0,'HTML'),(206,'UselessParenthesesCheck','S1110','squid','<p>Useless parentheses can sometimes be misleading and so should be removed. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nreturn 3;\nreturn (x);           // Noncompliant\nreturn (x + 1);       // Noncompliant\nint x = (y / 2 + 1);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nreturn 3;\nreturn x;\nreturn x + 1;\nint x = y / 2 + 1;\n</pre>',2,NULL,'Useless parentheses around expressions should be removed to prevent any misunderstanding','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'confusing',0,'HTML'),(207,'UnusedPrivateMethod','S1144','squid','<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code decreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule doesn\'t raise any issue on annotated methods.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/OYIyAQ\">CERT, MSC07-CPP.</a> - Detect and remove dead code\n</li></ul>',2,NULL,'Unused \"private\" methods should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,unused',0,'HTML'),(208,'S1905',NULL,'squid','<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what\'s returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n  \n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>',1,NULL,'Redundant casts should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(209,'UselessImportCheck','S1128','squid','<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.</p>\n<p>Unused and useless imports should not occur if that is the case.</p>\n<p>Leaving them in reduces the code\'s readability, since their presence can be confusing.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; \'SomeType\' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>',1,NULL,'Useless imports should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'unused',0,'HTML'),(210,'CycleBetweenPackages','S1196','squid','<p>When several packages are involved in a cycle (package A &gt; package B &gt; package C &gt; package A, where \"&gt;\" means \"depends upon\"), that means those packages are highly coupled, and there is no way to reuse/extract one of those packages without importing all the other packages. Such cycle could quickly increase the effort required to maintain an application and embrace business change. </p>\n<p>SonarQube not only detect cycles between packages, but also calculates the minimum effort to break those cycles. This rule logs a violation on each source file having an outgoing dependency to be cut in order to break a cycle.</p>',2,NULL,'Cycles between packages should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1d',NULL,NULL,'design',0,'HTML'),(211,'S1479',NULL,'squid','<p>When <code>switch</code> statements have a large set of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map structure would be more readable and maintainable, and should be used instead.</p>',2,NULL,'\"switch\" statements should not have too many \"case\" clauses','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,35,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'brain-overload',0,'HTML'),(212,'S2326',NULL,'squid','<p>Type parameters that aren\'t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type parameters should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b; \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b; \n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',2,NULL,'Unused type parameters should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,unused',0,'HTML'),(213,'S2447',NULL,'squid','<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and <code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers\' code.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>',2,NULL,'Null should not be returned from a \"Boolean\" method','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'pitfall',0,'HTML'),(214,'S1118',NULL,'squid','<p>Utility classes, which are a collection of static members, are not meant to be instantiated.</p>\n<p>Even abstract utility classes, which can be extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly.</p>\n<p>Hence, at least one non-public constructor should be defined.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalAccessError(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>',2,NULL,'Utility classes should not have public constructors','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'design',0,'HTML'),(215,'NoSonar','S1291','squid','<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results but it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>',2,NULL,'\"NOSONAR\" should not be used to switch off issues','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'bad-practice',0,'HTML'),(216,'S2440',NULL,'squid','<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there\'s no reason to instantiate a class that has only <code>static</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n\n<h2>See Also</h2>\n<ul>\n<li> {rule:squid:S1118} - Utility classes should not have public constructors\n</li></ul>',2,NULL,'Classes with only \"static\" methods should not be instantiated','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy',0,'HTML'),(217,'S2200',NULL,'squid','<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific value other than 0 could result in false negatives.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>',2,NULL,'\"compareTo\" results should not be checked for specific values','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'unpredictable',0,'HTML'),(218,'S2442',NULL,'squid','<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with <code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such objects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/cQCaAg\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency objects\n</li></ul>',2,NULL,'\"Lock\" objects should not be \"synchronized\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,clumsy,multi-threading',0,'HTML'),(219,'S2441',NULL,'squid','<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not seem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use in a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such sessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be serialized, and </p>\n<p>understand that if you\'ve stored non-serializable objects in the session, errors will result. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn\'t serializable\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n</li></ul>',3,NULL,'Non-serializable objects should not be stored in \"HttpSession\" objects','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,cwe',0,'HTML'),(220,'S1596',NULL,'squid','<p>Since the introduction of generics in Java 5, it is recommended to use generic types such as <code>List&lt;String&gt;</code> instead of raw ones such as just <code>List</code>. Assigning a raw type into a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code> fields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<p>Developers will also more easily find the <code>emptyIterator()</code> and <code>emptyListIterator()</code> methods for which there is no field equivalent if they are used to call the methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>',2,NULL,'Collections.emptyList(), emptyMap() and emptySet() should be used instead of Collections.EMPTY_LIST, EMPTY_MAP and EMPTY_SET','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'obsolete,pitfall',0,'HTML'),(221,'S2444',NULL,'squid','<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of non-<code>volatile</code> fields could mean that a second thread has access to a half-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block should be <code>synchronized</code> or the variable made <code>volatile</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected static Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();  // Noncompliant\n    return instance;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprotected static volatile Object instance = null;\n\npublic static Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>\n<p>or </p>\n<pre>\nprotected static Object instance = null;\n\npublic static synchronized Object getInstance() {\n    if (instance != null) {\n        return instance;\n    }\n\n    instance = new Object();\n    return instance;\n}\n</pre>',3,NULL,'Lazy initialization of \"static\" fields should be \"synchronized\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug,multi-threading',0,'HTML'),(222,'S2201',NULL,'squid','<p>When the call to a function doesn\'t have any side effects, what is the point of making the call if the results are ignored? In such case, either the function call is useless and should be dropped or the source code doesn\'t behave as expected. </p>\n<p>To prevent generating any false-positives, this rule triggers an issues only on the following predefined list of immutable classes in the Java API : String, Boolean, Integer, Double, Float, Byte, Character, Short, StackTraceElement.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods\n</li></ul>',3,NULL,'Return values should not be ignored when function calls don\'t have any side effects','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bug,cert,misra',0,'HTML'),(223,'S1598',NULL,'squid','<p>By convention, a Java class\' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java file located at \"src/org/sonarqube/Foo.java\" should have a package of \"org.sonarqube\". </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the \"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>',2,NULL,'Package declaration should match source file directory','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(224,'S2204',NULL,'squid','<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they\'re distinct from <code>Integer</code> and <code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free, thread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should <code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and <code>AtomicBoolean</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>',4,NULL,'\".equals()\" should not be used to test the values of \"Atomic\" classes','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,multi-threading',0,'HTML'),(225,'S2446',NULL,'squid','<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code> rouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/OoAlAQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread\n</li></ul>',3,NULL,'\"notifyAll\" should be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'bug,cert,multi-threading',0,'HTML'),(226,'S2445',NULL,'squid','<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code> field makes it possible for the field\'s value to change while a thread is in a block synchronized on the old value. That would allow a second thread, synchronized on the new value, to enter the block at the same time.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // Noncompliant; other threads now allowed into this block\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/6IEzAg\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may interact with untrusted code\n</li></ul>',4,NULL,'Blocks should be synchronized on \"private final\" fields','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,cwe,multi-threading,security',0,'HTML'),(227,'S00112','S112','squid','<p>Using such generic exceptions as <code>Error</code>, <code>RuntimeException</code>, <code>Throwable</code>, and <code>Exception</code> prevents calling methods from handling true, system-generated exceptions differently than application-generated errors. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\"); \n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Generic exceptions in the signatures of overriding methods are ignored.</p>\n<pre>\n@Override\npublic void myMethod() throws Exception {...}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/397.html\">MITRE, CWE-397</a> - Declaration of Throws for Generic Exception\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/BoB3AQ\">CERT, ERR07-J.</a> - Do not throw RuntimeException, Exception, or Throwable\n</li></ul>',3,NULL,'Generic exceptions should never be thrown','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe,error-handling,security',0,'HTML'),(228,'S1149',NULL,'squid','<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them thread-safe.</p>\n<p>Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n<li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code>\n</li><li> <code>Deque</code> instead of <code>Stack</code>\n</li><li> <code>HashMap</code> instead of <code>Hashtable</code>\n</li><li> <code>StringBuilder</code> instead of <code>StringBuffer</code>\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector(); \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is allowed in method signatures when overriding an existing method.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>',2,NULL,'Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'multi-threading,performance',0,'HTML'),(229,'S2118',NULL,'squid','<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown. Only a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>',3,NULL,'Non-serializable classes should not be written','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,serialization',0,'HTML'),(230,'S1700',NULL,'squid','<p>It\'s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider the common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular aspect of the class it represents or holds.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo { \n  private String foo; \n\n  public String getFoo() { } \n} \n\nFoo foo = new Foo(); \nfoo.getFoo() // what does this return? \n</pre> \n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name; \n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>',2,NULL,'A field should not duplicate the name of its containing class','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'brain-overload',0,'HTML'),(231,'S1701',NULL,'squid','<p>It\'s confusing to have a class field with the same name as a method in the class. It\'s also confusing to have multiple fields that differ only in capitalization</p>\n<p>Typically this situation indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name. However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n\n  public static final String QUERY = \"Select name from person\";\n  private String query;  // Noncompliant\n  public String query() { // Noncompliant\n    // do something...\n  }\n\n  private void doSomething() {\n\n    String tmp = query; // is this what was intended? Should this have been a call to query()?\n\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public static final String NAME_QUERY = \"Select name from person\";\n  private String queryString; // member has been renamed\n  public String query() { \n    // do something...\n  }\n\n  private void doSomething() {\n\n    String tmp = query; // results in a compile error\n    String tmp2 = query(); // no question now what was intended\n  }\n}\n</pre>\n\n<h2>Deprecated</h2>\n<p>This rule is deprecated, use {rule:squid:S1845} instead.</p>',2,NULL,'Fields and methods should not have conflicting names','DEPRECATED','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'brain-overload',0,'HTML'),(232,'S1943',NULL,'squid','<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may break for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to reproduce when it\'s time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n<li> <code>FileReader</code>\n</li><li> <code>FileWriter</code>\n</li><li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n<ul>\n<li> <code>String(byte[] bytes)</code>\n</li><li> <code>String(byte[] bytes, int offset, int length)</code> \n</li></ul>\n</li><li> <code>String.getBytes()</code>\n</li><li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code>\n</li><li> <code>InputStreamReader(InputStream in)</code>\n</li><li> <code>OutputStreamWriter(OutputStream out)</code>\n</li><li> <code>ByteArrayOutputStream.toString()</code>\n</li><li> Some <code>Formatter</code> constructors\n<ul>\n<li> <code>Formatter(String fileName)</code>\n</li><li> <code>Formatter(File file)</code>\n</li><li> <code>Formatter(OutputStream os)</code>\n</li></ul>\n</li><li> Some <code>Scanner</code> constructors\n<ul>\n<li> <code>Scanner(File source)</code>\n</li><li> <code>Scanner(Path source)</code>\n</li><li> <code>Scanner(InputStream source)</code>\n</li></ul>\n</li><li> Some <code>PrintStream</code> constructors\n<ul>\n<li> <code>PrintStream(File file)</code>\n</li><li> <code>PrintStream(OutputStream out)</code>\n</li><li> <code>PrintStream(OutputStream out, boolean autoFlush)</code>\n</li><li> <code>PrintStream(String fileName)</code>\n</li></ul>\n</li><li> Some <code>PrintWriter</code> constructors\n<ul>\n<li> <code>PrintWriter(File file)</code>\n</li><li> <code>PrintWriter(OutputStream out)</code>\n</li><li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code>\n</li><li> <code>PrintWriter(String fileName)</code>\n</li></ul>\n</li><li> <code>IOUtils</code> methods which accept an encoding argument when that argument is null, and overloads of those methods that omit the encoding argument\n</li></ul>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/FoL5AQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data between JVMs\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JgAWCQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string\n</li></ul>',2,NULL,'Classes and methods that rely on the default system encoding should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,unpredictable',0,'HTML'),(233,'S1948',NULL,'squid','<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is never explicitly serialized or deserialized. That\'s because under load, most J2EE application frameworks flush objects to disk, and an allegedly <code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers.</p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they could be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the class.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn\'t serializable\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the responsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk\n</li><li> <a href=\"http://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a>\n</li><li> <a href=\"http://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a>\n</li></ul>',3,NULL,'Fields in a \"Serializable\" class should either be transient or serializable','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug,cwe,serialization',0,'HTML'),(234,'S00107','S107','squid','<p>A long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many things.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a maximum number of 4 parameters:</p>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Methods annotated with Spring\'s <code>@RequestMapping</code> may have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.</p>',2,NULL,'Methods should not have too many parameters','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'brain-overload',0,'HTML'),(235,'S1141',NULL,'squid','<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand which block will catch which exception.</p>',2,NULL,'Try-catch blocks should not be nested','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'confusing',0,'HTML'),(236,'S881',NULL,'squid','<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n<li> It can significantly impair the readability of the code.\n</li><li> It introduces additional side effects into a statement, with the potential for undefined behavior.\n</li><li> It is safer to use these operators in isolation from any other arithmetic operators.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--; \nfoo = bar++ / 4;\n</pre>\n\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;    \nu8a = u8b + u8c; \nu8c--; \nfoo = bar / 4;\nbar++;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 12.1 - Limited dependence should be placed on the C operator precedence rules in expressions.\n</li><li> MISRA C:2004, 12.13 - The increment (++) and decrement (--) operators should not be mixed with other operators in an expression.\n</li><li> MISRA C++:2008, 5-2-10 - The increment (++) and decrement (--) operator should not be mixed with other operators in an expression.\n</li><li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit\n</li><li> MISRA C:2012, 13.3 - A full expression containing an increment (++) or decrement (--) operator should have no other potential side effects other than that cause by the increment or decrement operator\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwE\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/fYAyAQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/yQC7AQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same object within an expression\n</li></ul>',2,NULL,'Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,misra',0,'HTML'),(237,'S2110',NULL,'squid','<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month starts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12 for month, and you\'ll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and <code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n<tr><th>Field</th><th>Valid</th></tr>\n<tr><td>month</td><td>0-11</td></tr>\n<tr><td>date (day)</td><td>0-31</td></tr>\n<tr><td>hour</td><td>0-23</td></tr>\n<tr><td>minute</td><td>0-60</td></tr>\n<tr><td>second</td><td>0-61</td></tr>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>',3,NULL,'Invalid \"Date\" values should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(238,'S1142',NULL,'squid','<p>Having too many return statements in a method increases the method\'s essential complexity because the flow of execution is broken each time a return statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>',2,NULL,'Methods should not have too many return statements','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'brain-overload',0,'HTML'),(239,'S2230',NULL,'squid','<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn\'t \"see\" non-<code>public</code> methods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code>  method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the method is actually written to be <code>@Transactional</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>',3,NULL,'Non-public methods should not be \"@Transactional\"','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,spring',0,'HTML'),(240,'S1143',NULL,'squid','<p><code>return</code>ing, <code>break</code>ing, <code>throw</code>ing, and so on from a <code>finally</code> block suppresses the propagation of any unhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and <code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/mIEbAQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block\n</li></ul>',4,NULL,'Jump statements should not occur in \"finally\" blocks','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug,cert,cwe,error-handling',0,'HTML'),(241,'S00108','S108','squid','<p>Most of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n</pre>\n\n<h2>Exceptions</h2>\n<p>When a block contains a comment, this block is not considered to be empty unless it is a <code>synchronized</code> block. <code>synchronized</code> blocks are still considered empty even with comments because they can still affect program flow.</p>',2,NULL,'Nested blocks of code should not be left empty','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'suspicious',0,'HTML'),(242,'S2232',NULL,'squid','<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code> result sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear on what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (! rs.next()) {\n  // process row\n}\n</pre>',2,NULL,'\"ResultSet.isLast()\" should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'performance,pitfall,sql',0,'HTML'),(243,'S2111',NULL,'squid','<p>Because of floating point imprecision, you\'re unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to 0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding.</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = BigDecimal.valueOf(1.1);\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/NQAVAg\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point literals\n</li></ul>',3,NULL,'\"BigDecimal(double)\" should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert',0,'HTML'),(244,'S00103','S103','squid','<p>Having to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.</p>',1,NULL,'Lines should not be too long','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(245,'RightCurlyBraceStartLineCheck','S1109','squid','<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the beginning of a line.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();} \n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n} \n</pre>\n\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();} \n</pre>',1,NULL,'A close curly brace should be located at the beginning of a line','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(246,'S1145',NULL,'squid','<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code> statements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n<li> An if statement was changed during debugging and that debug code has been committed.\n</li><li> Some value was left unset.\n</li><li> Some logic is not doing what the programmer thought it did.\n</li></ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {  \n  doSomething(); \n}\n...\nif (false) {  \n  doSomethingElse(); \n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething(); \n...\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.\n</li><li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant\n</li></ul>',2,NULL,'Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'bug,cwe,misra,security',0,'HTML'),(247,'S2114',NULL,'squid','<p>Passing a collection as an argument to the collection\'s own method is either an error - some other argument was intended - or simply nonsensical code. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in undefined behavior. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>',3,NULL,'Collections should not be passed as arguments to their own methods','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug',0,'HTML'),(248,'S2235',NULL,'squid','<p>According to Oracle Javadoc:</p>\n<blockquote>\n<p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object\'s monitor or to notify other threads waiting on an object\'s monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>',3,NULL,'IllegalMonitorStateException should not be caught','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,multi-threading',0,'HTML'),(249,'S00105','S105','squid','<p>Developers should not need to configure the tab width of their text editors in order to be able to read source code.</p>\n<p>So the use of tabulation character must be banned.</p>',1,NULL,'Tabulation characters should not be used','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(250,'S1147',NULL,'squid','<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the entire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and skipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them should be called from applications running in a J2EE container.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit()\n</li></ul>',2,NULL,'Exit methods should not be called','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'cert,cwe,suspicious',0,'HTML'),(251,'S2116',NULL,'squid','<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array\'s \"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method\'s output actually reflects the array\'s contents. Instead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>',3,NULL,'\"hashCode\" and \"toString\" should not be called on array instances','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(252,'S00104','S104','squid','<p>A source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks.</p>\n<p>Those smaller files will not only be easier to understand but also probably easier to test.</p>',2,NULL,'Files should not have too many lines','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1h',NULL,NULL,'brain-overload',0,'HTML'),(253,'S1148',NULL,'squid','<p><code>Throwable.printStackTrace(...)</code> prints a throwable and its stack trace to some stream.</p>\n<p>Loggers should be used instead to print throwables, as they have many advantages:</p>\n<ul>\n<li> Users are able to easily retrieve the logs.\n</li><li> The format of log messages is uniform and allow users to browse the logs easily.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>',3,NULL,'Throwable.printStackTrace(...) should not be called','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'error-handling,security',0,'HTML'),(254,'S2236',NULL,'squid','<p>On a Thread instance, the methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available only because all classes in Java extend <code>Object</code> and therefore automatically inherit the methods. But there are two very good reasons to not call these methods on a Thread instance:</p>\n<ul>\n<li> Doing so is really confusing. What is really expected when calling, for instance, the <code>wait(...)</code> method on a Thread? That the execution of the Thread is suspended, or that acquisition of the object monitor is waited for?\n</li><li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling them will corrupt the behavior of the JVM.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>',4,NULL,'Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug,multi-threading',0,'HTML'),(255,'S00121','S121','squid','<p>While not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// the two statements seems to be attached to the if statement, but that is only true for the first one:\nif (condition)\n  executeSomething();\n  checkSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  executeSomething();\n  checkSomething();\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 14.8 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement\n</li><li> MISRA C:2004, 14.9 - An if (expression) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement\n</li><li> MISRA C++:2008, 6-3-1 - The statement forming the body of a switch, while, do ... while or for statement shall be a compound statement\n</li><li> MISRA C++:2008, 6-4-1 - An if (condition) construct shall be followed by a compound statement. The else keyword shall be followed by either a compound statement, or another if statement\n</li><li> MISRA C:2012, 15.6 - The body of an iteration-statement or a selection-statement shall be a compound-statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/1QGMAg\">CERT, EXP19-C.</a> - Use braces for the body of an if, for, or while statement\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n</li></ul>',2,NULL,'Control structures should use curly braces','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,misra,pitfall',0,'HTML'),(256,'S00120','S120','squid','<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z]+(\\.[a-z][a-z0-9]*)*$</code>:</p>\n<pre>\npackage org.exAmple; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example; \n</pre>',1,NULL,'Package names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'convention',0,'HTML'),(257,'S00122','S122','squid','<p>For better readability, do not put more than one statement on a single line.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(someCondition) doSomething();\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif(someCondition) {\n  doSomething();\n}\n</pre>',1,NULL,'Statements should be on separate lines','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(258,'S2109',NULL,'squid','<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n<li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>, <code>@SuppressWarnings</code>.\n</li><li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the default.\n</li><li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM.\n</li></ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any other retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>',4,NULL,'Reflection should not be used to check non-runtime annotations','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug',0,'HTML'),(259,'S00118','S118','squid','<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all abstract class names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>^Abstract[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nabstract class MyAbstractClass {\n}\n\nclass LikeClass {\n}\n</pre>',1,NULL,'Abstract class names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'convention',0,'HTML'),(260,'S00117','S117','squid','<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all local variable and function parameter names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic void doSomething(int my_param) { \n  int LOCAL;    \n  ...             \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(int myParam) { \n  int local;  \n  ...               \n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Loop counters are ignored by this rule.</p>\n<pre>\nfor (int i = 0; i &lt; limit; i++) {  // Compliant\n  // ...\n}\n</pre>',1,NULL,'Local variable and method parameter names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(261,'S1132',NULL,'squid','<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>',2,NULL,'Strings literals should be placed on the left side when checking for equality','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bad-practice',0,'HTML'),(262,'S00119','S119','squid','<p>Shared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type parameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.</p>\n<p>This rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass&lt;TYPE&gt; { // Noncompliant\n  &lt;TYPE&gt; void method(TYPE t) { // Noncompliant\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass&lt;T&gt; { \n  &lt;T&gt; void method(T t) {\n  }\n}\n</pre>',1,NULL,'Type parameter names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'convention',0,'HTML'),(263,'S1133',NULL,'squid','<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>',0,NULL,'Deprecated code should be removed eventually','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'obsolete',0,'HTML'),(264,'S00114','S114','squid','<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all interface names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic interface myInterface {...} // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyInterface {...}\n</pre>',1,NULL,'Interface names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'convention',0,'HTML'),(265,'S1134',NULL,'squid','<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>',2,NULL,'\"FIXME\" tags should be handled','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,'HTML'),(266,'S00113','S113','squid','<p>Some tools such as Git work better when files end with an empty line.</p>\n<p>This rule simply generates an issue if it is missing.</p>\n<p>For example, a Git diff looks like this if the empty line is missing at the end of the file:</p>\n<pre>\n+class Test {\n+}\n\\ No newline at end of file\n</pre>',1,NULL,'Files should contain an empty new line at the end','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'convention',0,'HTML'),(267,'S1135',NULL,'squid','<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags, and ensure that they do not go unnoticed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>',0,NULL,'\"TODO\" tags should be handled','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,0,'HTML'),(268,'S00116','S116','squid','<p>Sharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\nclass MyClass {\n   private int my_field;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private int myField;\n}\n</pre>',1,NULL,'Field names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(269,'S2226',NULL,'squid','<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to process this request. So all threads are sharing the servlet instances and by extension instance fields.  To prevent any misunderstanding and unexpected behavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it\'s obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/EYBUC\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet\n</li></ul>',3,NULL,'Servlets should not have mutable instance fields','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug,cert,multi-threading,struts',0,'HTML'),(270,'S00115','S115','squid','<p>Shared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$</code>:</p>\n<pre>\npublic class MyClass {\n  public static final int first = 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public static final int FIRST = 1; \n}\n\npublic enum MyEnum {\n  FIRST;\n}\n</pre>',1,NULL,'Constant names should comply with a naming convention','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(271,'S2225',NULL,'squid','<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code> instead contravenes the method\'s implicit contract.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return null; // Noncompliant\n  } else {\n    // ...\n </pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic override string ToString () {\n  if (this.collection.Count == 0) {\n    return \"\";\n  } else {\n    // ...\n </pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference\n</li></ul>',3,NULL,'\"toString()\" and \"clone()\" methods should not return null','READY','java','2017-09-22 09:51:12','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cwe',0,'HTML'),(272,'S2093',NULL,'squid','<p>Java 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer to bullet-proof, it should be preferred over the older <code>try</code>/<code>catch</code>/<code>finally</code> version.</p>\n<p>This rule checks that <code>close</code>-able resources are opened in a try-with-resources statement.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileReader fr = null;\nBufferedReader br = null;\ntry {\n  fr = new FileReader(fileName);\n  br = new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br != null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr != null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry (\n    FileReader fr = new FileReader(fileName);\n    BufferedReader br = new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n<p>or</p>\n<pre>\ntry (BufferedReader br = \n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don\'t want to\n  return br.readLine();\n}\ncatch (...) {}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/MACfBg\">CERT, ERR54-J.</a> - Use a try-with-resources statement to safely handle closeable resources\n</li></ul>',2,NULL,'Try-with-resources should be used','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,pitfall',0,'HTML'),(273,'S899',NULL,'squid','<p>When the return value of a function call contain the operation status code, this value should be tested to make sure the operation completed successfully.</p>\n<p>This rule raises an issue when the return values of <code>java.io.File.delete()</code> or <code>java.util.concurrent.locks.Lock.tryLock()</code> are ignored.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  file.delete();  // Noncompliant\n  // ...\n  lock.tryLock(); // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(File file, Lock lock) {\n  if (!lock.tryLock()) {\n    // lock failed; take appropriate action\n  }\n  if (!file.delete()) {\n    // file delete failed; take appropriate action\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 16.10 - If a function returns error information, then that error information shall be tested \n</li><li> MISRA C++:2008, 0-1-7 - The value returned by a function having a non-void return type that is not an overloaded operator shall always be used. \n</li><li> MISRA C:2012, Dir. 4.7 - If a function returns error information, then that error information shall be tested \n</li><li> MISRA C:2012, 17.7 - The value returned by a function having non-void return type shall be used \n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/w4C4Ag\">CERT, ERR33-C.</a> - Detect and handle standard library errors\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/iIBfBw\">CERT, POS54-C.</a> - Detect and handle POSIX library errors\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gEqAQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9YIRAQ\">CERT, EXP12-C.</a> - Do not ignore values returned by functions\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/eoAyAQ\">CERT, EXP12-CPP.</a> - Do not ignore values returned by functions or methods\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/toHWAw\">CERT, FIO02-J.</a> - Detect and handle file-related errors\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/754\">MITRE, CWE-754</a> - Improper Check for Unusual Exceptional Conditions\n</li></ul>',3,NULL,'Return values should not be ignored when they contain the operation status code','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,cwe,error-handling,misra,security',0,'HTML'),(274,'S2095',NULL,'squid','<p>Java\'s garbage collection cannot be relied on to clean up everything. Specifically, connections, streams, files and other classes that implement the <code>Closeable</code> interface or it\'s super-interface, <code>AutoCloseable</code>, must be manually closed after creation. Further, that <code>close</code> call must be made in a <code>finally</code> block, otherwise an exception could keep the call from being made. </p>\n<p>Failure to properly close resources will result in a resource leak which could bring first the application and then perhaps the box it\'s on to their knees.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = Files.newBufferedReader(path, this.charset)) {\n  // ...\n  reader.close();  // Noncompliant\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try{\n    for (String property : propertyList) {\n      stream = new FileOutputStream(\"myfile.txt\");  // Noncompliant\n      // ...\n    }\n  }catch(Exception e){\n    // ...\n  }finally{\n    stream.close();  // Multiple streams were opened. Only the last is closed.\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readTheFile() throws IOException {\n  Path path = Paths.get(this.fileName);\n  BufferedReader reader = null;\n  try {\n    reader = Files.newBufferedReader(path, this.charset)) {\n    // ...\n  } finally {\n    if (reader != null) {\n      reader.close();\n    }\n  }\n}\n\nprivate void doSomething() {\n  OutputStream stream = null;\n  try{\n    stream = new FileOutputStream(\"myfile.txt\");\n    for (String property : propertyList) {\n      // ...\n    }\n  }catch(Exception e){\n    // ...\n  }finally{\n    stream.close();\n  }\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>Java 7 introduced the try-with-resources statement, which implicitly closes <code>Closeables</code>. All resources opened in a try-with-resources statement are ignored by this rule. </p>\n<pre>\ntry (BufferedReader br = new BufferedReader(new FileReader(fileName))) {\n  //...\n}\ncatch ( ... ) {\n  //...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9gFqAQ\">CERT, FIO04-J.</a> - Release resources when they are no longer needed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/GAGQBw\">CERT, FIO42-C.</a> - Close files when they are no longer needed\n</li></ul>',4,NULL,'Resources should be closed','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert,cwe,denial-of-service,leak,security',0,'HTML'),(275,'S2097',NULL,'squid','<p>Because the <code>equals</code> method takes a generic <code>Object</code> as a parameter, any type of object may be passed to it. The method should not assume it will only be used to test objects of its class type. It must instead check the parameter\'s type.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(Object obj) {\n  MyClass mc = (MyClass)obj;  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null)\n    return false;\n\n  if (this.getClass() != obj.getClass())\n    return false;\n  \n  MyClass mc = (MyClass)obj; \n  // ...\n}\n</pre>',4,NULL,'\"equals(Object obj)\" should test argument type','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(276,'S1448',NULL,'squid','<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>',2,NULL,'Classes should not have too many methods','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,33,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1h',NULL,NULL,'brain-overload',0,'HTML'),(277,'S2658',NULL,'squid','<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn\'t even have to instantiate or explicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/545.html\">MITRE, CWE-545</a> - Use of Dynamic Class Loading\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top 10 2013 Category A1</a> - Injection\n</li></ul>',3,NULL,'Classes should not be loaded dynamically','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,18,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'45min',NULL,NULL,'cwe,owasp-a1,security',0,'HTML'),(278,'S1449',NULL,'squid','<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code> or <code>toUpperCase()</code> on <code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters. For instance with the Turkish language, when converting the small letter \'i\' to upper case, the result is capital letter \'I\' with a dot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers who use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it\'s time to fix them. For locale-sensitive strings, the correct locale should always be used, but <code>Locale.ENGLISH</code> can be used for case-insensitive ones.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/EwAiAg\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data\n</li></ul>',2,NULL,'Locale should be used in String operations','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,unpredictable',0,'HTML'),(279,'S3066',NULL,'squid','<p><code>enum</code>s are generally thought of as constant, but an <code>enum</code> with a <code>public</code> field or <code>public</code> setter is not only non-constant, but also vulnerable to malicious code. Ideally fields in an <code>enum</code> are <code>private</code> and set in the constructor, but if that\'s not possible, their visibility should be reduced as much as possible.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) { \n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass = landMass;\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount; \n  private int landMass;\n\n  Continent(int countryCount, int landMass) { \n    // ...\n  }\n</pre>',3,NULL,'\"enum\" fields should not be publicly mutable','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,18,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bad-practice,security',0,'HTML'),(280,'S2653',NULL,'squid','<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development, but such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic that an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be present.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoB8Bw\">CERT, ENV06-J.</a> - Production code must not contain debugging entry points\n</li></ul>',3,NULL,'Web applications should not have a \"main\" method','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,cwe,jee,security',0,'HTML'),(281,'S3052',NULL,'squid','<p>The compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need to explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it\'s considered poor style to do so.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  int count = 0;  // Noncompliant\n  // ...\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p><code>final</code> fields are ignored.</p>',1,NULL,'Fields should not be initialized to default values','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention,finding',0,'HTML'),(282,'S2886',NULL,'squid','<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may result in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method of the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age; \n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age; \n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/I4BoAg\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects\n</li></ul>',3,NULL,'Getters and setters should be synchronized in pairs','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert,multi-threading',0,'HTML'),(283,'S2885',NULL,'squid','<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data problems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or <code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  static private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  static private Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>',3,NULL,'Non-thread-safe fields should not be static','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,multi-threading',0,'HTML'),(284,'S2675',NULL,'squid','<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be the case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the <code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method should be refactored to make it the case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>',2,NULL,'\"readObject\" should not be \"synchronized\"','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'confusing',0,'HTML'),(285,'S2674',NULL,'squid','<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value returned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned from the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not checked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child classes.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/XACSAQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an array\n</li></ul>',4,NULL,'The value returned from a stream read should be checked','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert',0,'HTML'),(286,'S3400',NULL,'squid','<p>There\'s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a method call must be made will likely mislead developers who call the method into thinking that something more is done. Declare a constant instead. This rule raises an issue if an only if the method contains only one  statement: the <code>return</code> statement and when the returned value is a constant. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static int bestNumber = 12;\n</pre>\n\n<h2>Exceptions</h2>\n<p><code>@Override</code> methods are ignored by this rule, since they may be required by an interface or needed to replace the value returned by a parent class.</p>',2,NULL,'Methods should not return constants','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'confusing',0,'HTML'),(287,'S2677',NULL,'squid','<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of action is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>, <code>Reader.read()</code>, and these methods in any child classes.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>',4,NULL,'\"read\" and \"readLine\" return values should be used','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(288,'S2676',NULL,'squid','<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you\'ll still have a negative number. Since your code is likely to assume that it\'s a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object\'s <code>compareTo</code> method, and <code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods is similarly ill-advised.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>',3,NULL,'Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(289,'S2786',NULL,'squid','<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the docs</a>:</p>\n<blockquote>Nested enum types are implicitly <code>static</code>.</blockquote>\n<p>So there\'s no need to declare them <code>static</code> explicitly.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>',2,NULL,'Nested \"enum\"s should not be declared static','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy',0,'HTML'),(290,'S2293',NULL,'squid','<p>Java 7 introduced the diamond operator (<code>&lt;&gt;</code>) to reduce the verbosity of generics code. For instance, instead of having to declare a <code>List</code>\'s type in both its declaration and its constructor, you can now simplify the constructor declaration with <code>&lt;&gt;</code>, and the compiler will infer the type.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;String&gt;();  // Noncompliant\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;String,List&lt;Integer&gt;&gt;();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; strings = new ArrayList&lt;&gt;();\nMap&lt;String,List&lt;Integer&gt;&gt; map = new HashMap&lt;&gt;();\n</pre>',2,NULL,'The diamond operator (\"<>\") should be used','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'clumsy',0,'HTML'),(291,'S3020',NULL,'squid','<p>Given no arguments, the <code>Collections.toArray</code> method returns an <code>Object []</code>, which will cause a <code>ClassCastException</code> at runtime if you try to cast it to an array of the proper class. Instead, pass an array of the correct type in to the call.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray();  // Noncompliant; ClassCastException thrown\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic String [] getStringArray(List&lt;String&gt; strings) {\n  return (String []) strings.toArray(new String[0]);\n}\n</pre>',3,NULL,'\"toArray\" should be passed an array of the proper type','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(292,'S2976',NULL,'squid','<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and insecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava\'s similarly-named <code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n<li> call to <code>File.createTempFile</code>\n</li><li> delete resulting file\n</li><li> call <code>mkdir</code> on the File object\n</li></ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A9-Using_Components_with_Known_Vulnerabilities\">OWAPS Top Ten 2013 Category A9</a> - Using Components with Known Vulnerabilities\n</li></ul>',3,NULL,'\"File.createTempFile\" should not be used to create a directory','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,18,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'owasp-a9,security',0,'HTML'),(293,'S2975',NULL,'squid','<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky and difficult to get right, according to Joshua Bloch:</p>\n<blockquote>Object\'s clone method is very tricky. It\'s based on field copies, and it\'s \"extra-linguistic.\" It creates an object without calling a constructor. There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow copy of the object.  The clone generally shares state with the object being cloned. If that state is mutable, you don\'t have two independent objects. If you modify one, the other changes as well. And all of a sudden, you get random behavior. </blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a>\n</li></ul>\n\n<h3>See Also</h3>\n<ul>\n<li> {rule:squid:S2157} - \"Cloneables\" should implement \"clone\"\n</li><li> {rule:squid:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"\n</li></ul>',2,NULL,'\"clone\" should not be overridden','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'suspicious',0,'HTML'),(294,'S2737',NULL,'squid','<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting it bubble up automatically, but with more code and the additional detrement of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',1,NULL,'\"catch\" clauses should do more than rethrow','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,clumsy,finding,unused',0,'HTML'),(295,'S2970',NULL,'squid','<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n<li> Fest: <code>assertThat</code> is not followed by an assertion invocation\n</li><li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation\n</li><li> Mockito: <code>verify</code> is not followed by a method invocation\n</li></ul>\n<p>In such cases, what is intended to be a test doesn\'t actually verify anything</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let\'s now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let\'s check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let\'s now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let\'s check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>',3,NULL,'Assertions should be complete','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,tests',0,'HTML'),(296,'S2177',NULL,'squid','<p>When a method in a child class has the same signature as a method in a parent class, it is assumed to be an override. However, that\'s not the case when:</p>\n<ul>\n<li> the parent class method is <code>static</code> and the child class method is not.\n</li><li> the arguments or return types of the child method are in different packages than those of the parent method. \n</li><li> the parent class method is <code>private</code>.\n</li></ul>\n<p>Typically, these things are done unintentionally; the private parent class method is overlooked, the <code>static</code> keyword in the parent declaration is overlooked, or the wrong class is imported in the child. But if the intent is truly for the child class method to be different, then the method should be renamed to prevent confusion. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport fruit.Pear;\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // Noncompliant; this is not an override\n    // ...\n  }\n\n\n  public void doSomethingElse() {  // Noncompliant; parent method is static\n    //...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// Parent.java\nimport computer.Pear;\npublic class Parent {\n\n  public void doSomething(Pear p) {\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n\n// Child.java\nimport computer.Pear;  // import corrected\npublic class Child extends Parent {\n\n  public void doSomething(Pear p) {  // true override (see import)\n    //,,,\n  }\n\n  public static void doSomethingElse() {\n    //...\n  }\n}\n</pre>',2,NULL,'Child class methods named for parent class methods should be overrides','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'pitfall',0,'HTML'),(297,'S1640',NULL,'squid','<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more efficient than other sets because the underlying data structure is a simple array.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  \n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  \n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;COLOR, String&gt; (COLOR.class);\n  }\n}\n</pre>',2,NULL,'Maps with keys that are enum values should be replaced with EnumMap','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'performance',0,'HTML'),(298,'S2972',NULL,'squid','<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold should probably be externalized to its own file.</p>',2,NULL,'Inner classes should not have too many lines','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'brain-overload',0,'HTML'),(299,'S3027',NULL,'squid','<p>An <code>indexOf</code> or <code>lastIndexOf</code> call with a single letter <code>String</code> can be made more performant by switching to a call with a <code>char</code> argument.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf(\"W\");  // Noncompliant\n// ...\nint otherPos = myStr.lastIndexOf(\"r\"); // Noncompliant\n// ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString myStr = \"Hello World\";\n// ...\nint pos = myStr.indexOf(\'W\'); \n// ...\nint otherPos = myStr.lastIndexOf(\'r\');\n// ...\n</pre>',1,NULL,'String function use should be optimized for single characters','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy,performance',0,'HTML'),(300,'S1641',NULL,'squid','<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other sets because the underlying data structure is a simple bitmap.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  \n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLORS.RED);\n    warm.add(COLORS.ORANGE);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  \n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    EnumSet&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>',2,NULL,'Sets with elements that are enum values should be replaced with EnumSet','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'performance',0,'HTML'),(301,'S2974',NULL,'squid','<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>',2,NULL,'Classes without \"public\" constructors should be \"final\"','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'design',0,'HTML'),(302,'S2973',NULL,'squid','<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a printable character.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = \"n\\u00E9e\"; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = \"née\";\n</pre>',2,NULL,'Escaped Unicode characters should not be used','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'confusing',0,'HTML'),(303,'S3373',NULL,'squid','<p>It makes sense to handle all related actions in the same place. Thus, the same <code>&lt;action&gt;</code> might logically handle all facets of CRUD on an entity, with no confusion in the naming about which <code>&lt;forward/&gt;</code> handles which facet. But go very far beyond that, and it becomes difficult to maintain a transparent naming convention. </p>\n<p>So to ease maintenance, this rule raises an issue when an <code>&lt;action&gt;</code> has more than the allowed number of <code>&lt;forward/&gt;</code> tags.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 4:</p>\n<pre>\n&lt;action path=\'/book\' type=\'myapp.BookDispatchAction\' name=\'form\' parameter=\'method\'&gt;\n  &lt;forward name=\'create\' path=\'/WEB-INF/jsp/BookCreate.jspx\' redirect=\'false\'/&gt;\n  &lt;forward name=\'read\' path=\'/WEB-INF/jsp/BookDetails\' redirect=\'false\'/&gt;\n  &lt;forward name=\'update\' path=\'/WEB-INF/jsp/BookUpdate.jspx\' redirect=\'false\'/&gt;\n  &lt;forward name=\'delete\' path=\'/WEB-INF/jsp/BookDelete.jspx\' redirect=\'false\'/&gt;\n  &lt;forward name=\'authorRead\' path=\'WEB-INF/jsp/AuthorDetails\' redirect=\'false\'/&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/action&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;action path=\'/book\' type=\'myapp.BookDispatchAction\' name=\'bookForm\' parameter=\'method\'&gt;\n  &lt;forward name=\'create\' path=\'/WEB-INF/jsp/BookCreate.jspx\' redirect=\'false\'/&gt;\n  &lt;forward name=\'read\' path=\'/WEB-INF/jsp/BookDetails\' redirect=\'false\'/&gt;\n  &lt;forward name=\'update\' path=\'/WEB-INF/jsp/BookUpdate.jspx\' redirect=\'false\'/&gt;\n  &lt;forward name=\'delete\' path=\'/WEB-INF/jsp/BookDelete.jspx\' redirect=\'false\'/&gt;\n&lt;/action&gt;\n\n&lt;action path=\'/author\' type=\'myapp.AuthorDispatchAction\' name=\'authorForm\' parameter=\'method\'&gt;\n  &lt;forward name=\'authorRead\' path=\'WEB-INF/jsp/AuthorDetails\' redirect=\'false\'/&gt;\n&lt;/action&gt;\n</pre>',2,NULL,'\"action\" mappings should not have too many \"forward\" entries','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'LINEAR',NULL,'20min',NULL,NULL,'per extra forward',NULL,'brain-overload,struts',0,'HTML'),(304,'S1996',NULL,'squid','<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This is doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or interface per file.</p>',2,NULL,'Files should contain only one top-level class or interface each','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'LINEAR',NULL,'10min',NULL,NULL,'per extra type',NULL,'brain-overload',0,'HTML'),(305,'S3374',NULL,'squid','<p>According to the Common Weakness Enumeration,</p>\n<blockquote>If two validation forms have the same name, the Struts Validator arbitrarily chooses one of the forms to use for input validation and discards the other. This decision might not correspond to the programmer\'s expectations...</blockquote>\n<p>In such a case, it is likely that the two forms should be combined. At the very least, one should be removed.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;form-validation&gt;\n  &lt;formset&gt;\n    &lt;form name=\"BookForm\"&gt; ... &lt;/form&gt;\n  &lt;/formset&gt;\n&lt;/form-validation&gt;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/102.html\">MITRE, CWE-102</a> - Struts: Duplicate Validation Forms\n</li><li> <a href=\"https://www.owasp.org/index.php/Struts:_Duplicate_Validation_Forms#Struts:_Duplicate_Validation_Forms\">OWASP, Improper Data Validation</a> - Struts: Duplicate Validation Forms\n</li></ul>',3,NULL,'Struts validation forms should have unique names','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,20,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,cwe,struts',0,'HTML'),(306,'S3281',NULL,'squid','<p>Default interceptors, such as application security interceptors, must be listed in the <code>ejb-jar.xml</code> file, or they will not be treated as default. </p>\n<p>This rule applies to projects that contain JEE Beans  (any one of <code>javax.ejb.Singleton</code>, <code>MessageDriven</code>, <code>Stateless</code> or <code>Stateful</code>).</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n// file: ejb-interceptors.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;&lt;!-- Noncompliant; will not be treated as default --&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n// file: ejb-jar.xml\n&lt;assembly-descriptor&gt;\n &lt;interceptor-binding&gt;\n      &lt;ejb-name&gt;*&lt;/ejb-name&gt;\n      &lt;interceptor-class&gt;com.myco.ImportantInterceptor&lt;/interceptor-class&gt;\n   &lt;/interceptor-binding&gt;\n&lt;/assembly-descriptor&gt;\n</pre>',4,NULL,'Default EJB interceptors should be declared in \"ejb-jar.xml\"','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug',0,'HTML'),(307,'S3282',NULL,'squid','<p>Exclusions for default interceptors can be declared either in xml or as class annotations. Since annotations are more visible to maintainers, they are preferred.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;assembly-descriptor&gt;\n      &lt;interceptor-binding&gt;\n         &lt;ejb-name&gt;MyExcludedClass&lt;/ejb-name&gt;\n         &lt;exclude-default-interceptors&gt;true&lt;/exclude-default-interceptors&gt; &lt;!-- Noncompliant --&gt;\n         &lt;exclude-class-interceptors&gt;true&lt;/exclude-class-interceptors&gt; &lt;!-- Noncomopliant --&gt;\n         &lt;method&gt;\n           &lt;method-name&gt;doTheThing&lt;/method-name&gt;\n         &lt;/method&gt;\n      &lt;/interceptor-binding&gt;\n\n&lt;/assembly-descriptor&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@ExcludeDefaultInterceptors\npublic class MyExcludedClass implements MessageListener\n{\n\n  @ExcludeClassInterceptors\n  @ExcludeDefaultInterceptors\n  public void doTheThing() {\n    // ...\n  }\n</pre>',2,NULL,'EJB interceptor exclusions should be declared as annotations','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'pitfall',0,'HTML'),(308,'S2637',NULL,'squid','<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null values and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field in a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n  \n  @Nonnull\n  private String primary;\n  private String secondary;\n  \n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n  \n  public MainClass() { // Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n  \n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>',3,NULL,'\"@NonNull\" values should not be set to null','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug',0,'HTML'),(309,'S2639',NULL,'squid','<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n<li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em>\n</li><li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters\n</li><li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n</pre>',3,NULL,'Inappropriate regular expressions should not be used','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug',0,'HTML'),(310,'S2638',NULL,'squid','<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the superclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are marked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and <code>@Nonnull</code>, then subclass parameters are not allowed to tightened the contract, and return values are not allowed to loosen it.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n\n<h2>See also</h2>\n<p>https://en.wikipedia.org/wiki/Liskov_substitution_principle</p>',2,NULL,'Method overrides should not change contracts','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'suspicious',0,'HTML'),(311,'S3047',NULL,'squid','<p>When a method loops multiple over the same set of data, whether it\'s a list or a set of numbers, it is highly likely that the method could be made more efficient by combining the loops into a single set of iterations.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingToAList(List&lt;String&gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n</pre>',2,NULL,'Multiple loops over the same set should be combined','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'performance',0,'HTML'),(312,'S2060',NULL,'squid','<p>An <code>Externalizable</code> class is one which handles its own <code>Serialization</code> and deserialization. During deserialization, the first step in the process is a default instantiation using the class\' no-argument constructor. Therefore an <code>Externalizable</code> class without a no-arg constructor cannot be deserialized.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Tomato implements Externalizable {  // Noncompliant; no no-arg constructor\n\n  public Tomato (String color, int weight) { ... }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Tomato implements Externalizable {\n\n  public Tomato() { ... }\n  public Tomato (String color, int weight) { ... }\n}\n</pre>',3,NULL,'\"Externalizable\" classes should have no-arguments constructors','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug',0,'HTML'),(313,'S2062',NULL,'squid','<p>The <code>readResolve()</code> method allows final tweaks to the state of an object during deserialization. Non-final classes which implement <code>readResolve()</code>, should not set its visibility to <code>private</code> since it will then be unavailable to child classes.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit implements Serializable { \n  private static final long serialVersionUID = 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent\'s readResolve() method\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit implements Serializable { \n  private static final long serialVersionUID = 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n</pre>',2,NULL,'\"readResolve\" methods should be inheritable','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(314,'S2185',NULL,'squid','<p>Certain math operations are just silly and should not be performed because their results are predictable.</p>\n<p>In particular, <code>anyValue % 1</code> is silly because it will always return 0.</p>\n<p>Casting a non-floating-point value to floating-point and then passing it to <code>Math.round</code>, <code>Math.ceil</code>, or <code>Math.floor</code> is silly  because the result will always be the original value. </p>\n<p>These operations are silly with any constant value: <code>Math.abs</code>, <code>Math.ceil</code>, <code>Math.floor</code>, <code>Math.rint</code>, <code>Math.round</code>.</p>\n<p>And these oprations are silly with certain constant values:</p>\n<table>\n<tr><th>Operation</th><th>Value</th></tr>\n<tr><td>acos</td><td>0.0 or 1.0</td></tr>\n<tr><td>asin</td><td>0.0 or 1.0</td></tr>\n<tr><td>atan</td><td>0.0 or 1.0</td></tr>\n<tr><td>atan2</td><td>0.0</td></tr>\n<tr><td>cbrt</td><td>0.0 or 1.0</td></tr>\n<tr><td>cos</td><td>0.0</td></tr>\n<tr><td>cosh</td><td>0.0</td></tr>\n<tr><td>exp</td><td>0.0 or 1.0</td></tr>\n<tr><td>expm1</td><td>0.0</td></tr>\n<tr><td>log</td><td>0.0 or 1.0</td></tr>\n<tr><td>log10</td><td>0.0 or 1.0</td></tr>\n<tr><td>sin</td><td>0.0</td></tr>\n<tr><td>sinh</td><td>0.0</td></tr>\n<tr><td>sqrt</td><td>0.0 or 1.0</td></tr>\n<tr><td>tan</td><td>0.0</td></tr>\n<tr><td>tanh</td><td>0.0</td></tr>\n<tr><td>toDegrees</td><td>0.0 or 1.0</td></tr>\n<tr><td>toRadians</td><td>0.0</td></tr>\n</table>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doMath(int a)\ndouble floor = Math.floor((double)a); // Noncompliant\ndouble ceiling = Math.ceil(4.2);\ndouble arcTan = Math.atan(0.0);\n</pre>',2,NULL,'Silly math should not be performed','READY','java','2017-10-10 15:22:04','2017-10-10 15:22:04',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'clumsy',0,'HTML'),(315,'S1659',NULL,'squid','<p>Declaring multiple variable on one line is difficult to read.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 8-0-1 - An init-declarator-list or a member-declarator-list shall consist of a single init-declarator or member-declarator respectively\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/7wHEAw\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/VgU\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/fAAhAQ\">CERT, DCL04-CPP.</a> - Do not declare more than one variable per declaration\n</li></ul>',1,NULL,'Multiple variables should not be declared on the same line','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,convention,misra',0,'HTML'),(316,'S3034',NULL,'squid','<p>When reading bytes in order to build other primitive values such as <code>int</code>s or <code>long</code>s, the <code>byte</code> values are automatically promoted, but that promotion can have unexpected results.</p>\n<p>For instance, the binary representation of the integer 640 is <code>0b0000_0010_1000_0000</code>, which can also be written with the array of (unsigned) bytes <code>[2, 128]</code>. However, since Java uses two\'s complement, the representation of the integer in signed bytes will be <code>[2, -128]</code>  (because the <code>byte</code> <code>0b1000_0000</code> is promoted to the <code>int</code> <code>0b1111_1111_1111_1111_1111_1111_1000_0000</code>). Consequently, trying to reconstruct the initial integer by shifting and adding the values of the bytes without taking care of the sign will not produce the expected result.  </p>\n<p>To prevent such accidental value conversion, use bitwise and (<code>&amp;</code>) to combine the <code>byte</code> value with <code>0xff</code> (255) and turn all the higher bits back off.</p>\n<p>This rule raises an issue any time a <code>byte</code> value is used as an operand without <code>&amp; 0xff</code>, when combined with shifts.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | readByte(); // Noncompliant\n    }\n    return result;\n  }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  int intFromBuffer() {\n    int result = 0;\n    for (int i = 0; i &lt; 4; i++) {\n      result = (result &lt;&lt; 8) | (readByte() &amp; 0xff);\n    }\n    return result;\n  }\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/SAHEAw\">CERT, NUM52-J.</a> - Be aware of numeric promotion behavior \n</li></ul>',3,NULL,'Raw byte values should not be used in bitwise operations in combination with shifts','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert',0,'HTML'),(317,'S2187',NULL,'squid','<p>There\'s no point in having a JUnit <code>TestCase</code> without any test methods. Similarly, you shouldn\'t have a file in the tests directory with \"Test\" in the name, but no tests in the file. Doing either of these things may lead someone to think that uncovered classes have been tested.</p>\n<p>This rule raises an issue when files in the test directory have \"Test\" in the name or implement <code>TestCase</code> but don\'t contain any tests.</p>',2,NULL,'TestCases should contain tests','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'confusing,tests,unused',0,'HTML'),(318,'S2186',NULL,'squid','<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in <code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the test won\'t fail.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>',3,NULL,'JUnit assertions should not be used in \"run\" methods','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'bug,tests',0,'HTML'),(319,'S2189',NULL,'squid','<p>An infinite loop is one that will never end while the program is running, I.E. you have to kill the program to get out of the loop. Whether it is by meeting the loop\'s end condition or via a <code>break</code>, every loop should have an end condition.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nfor (int i = 0; i &lt; 10; i--) { // Noncompliant; end condition but unreachable\n  //...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) { // end condition now reachable\n  //...\n}\n\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/PYHfAw\">CERT, MSC01-J.</a> - Do not use an empty infinite loop\n</li></ul>',4,NULL,'Loops should not be infinite','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert',0,'HTML'),(320,'S3398',NULL,'squid','<p>When a <code>private</code> method is only invoked by an inner class, there\'s no reason not to move it into that class. It will still have the same access to the outer class\' members, but the outer class will be clearer and less cluttered.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>',2,NULL,'\"private\" methods called only by inner classes should be moved to those classes','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'confusing',0,'HTML'),(321,'S2188',NULL,'squid','<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding method. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3 <code>TestCase</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>',3,NULL,'JUnit test cases should call super methods','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,tests',0,'HTML'),(322,'S3038',NULL,'squid','<p>There\'s no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the class <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>',2,NULL,'Abstract methods should not be redundant','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'confusing',0,'HTML'),(323,'S2864',NULL,'squid','<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed, it\'s more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>',2,NULL,'\"entrySet()\" should be iterated when both the key and value are needed','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'performance',0,'HTML'),(324,'S3340',NULL,'squid','<p>For optimal code readability, annotation arguments should be specified in the same order that they were declared in the annotation definition.</p>',1,NULL,'Annotation arguments should appear in the order in which they were declared','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(325,'S818',NULL,'squid','<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C++:2008, 2-13-4 - Literal suffixes shall be upper case\n</li><li> MISRA C:2012, 7.3 - The lowercase character \"l\" shall not be used in a literal suffix\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/koAtAQ\">CERT DCL16-C</a> - Use \"L,\" not \"l,\" to indicate a long value\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/n4AtAQ\">CERT DCL16-CPP</a> - Use \"L,\" not \"l,\" to indicate a long value\n</li></ul>\n\n<h3>See Also</h3>\n<ul>\n<li> {rule:squid:S1129} - Long suffix \"L\" should be upper case\n</li></ul>',1,NULL,'Literal suffixes should be upper case','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,convention,misra,pitfall',0,'HTML'),(326,'S1845',NULL,'squid','<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is confusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field with exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead added a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the case where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be disruptive to callers. Therefore renaming the member is the recommended action.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what\'s intended?\n\n  public void drivefast(){...} \n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...} \n\n  public void driveReallyFast(){...}\n\n}\n</pre>',2,NULL,'Methods and field names should not be the same or differ only by capitalization','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'confusing',0,'HTML'),(327,'S1607',NULL,'squid','<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why the test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up polluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have a notation about why it is being skipped.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n[TestMethod]\n[Ignore]  // Noncompliant\npublic void Test_DoTheThing() { \n  // ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n[TestMethod]\n[Ignore]  // renable when TCKT-1234 is fixed\npublic void Test_DoTheThing() { \n  // ...\n</pre>\n<p>or</p>\n<pre>\n[TestMethod]\n[Ignore]\n[WorkItem(1234)]\npublic void Test_DoTheThing() { \n  // ...\n</pre>',2,NULL,'Tests should not be ignored','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'suspicious,tests',0,'HTML'),(328,'S3346',NULL,'squid','<p>Since <code>assert</code> statements aren\'t executed by default (they must be enabled with JVM flags) developers should never rely on their execution the evaluation of any logic required for correct program function.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/vwG7AQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side effects\n</li></ul>',2,NULL,'\"assert\" should only be used with boolean variables','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,suspicious',0,'HTML'),(329,'S2259',NULL,'squid','<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At best, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or it could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a href=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable.</p>\n<p><code>@Nullable</code> denotes that, under some unspecified circumstances, the value might be null. To keep false positives low, this annotation is ignored. Whether an explicit test is required or not is left to the developer\'s discretion.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>Here are some examples of null pointer dereferences detected by this rule:</p>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn\'t null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown \n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn\'t accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/PAw\">CERT, EXP34-C.</a> - Do not dereference null pointers\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/ZwDOAQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A2-Broken_Authentication_and_Session_Management\">OWASP Top Ten 2013 Category A2</a> - Broken Authentication and Session Management\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten 2013 Category A6</a> - Sensitive Data Exposure\n</li></ul>',4,NULL,'Null pointers should not be dereferenced','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'bug,cert,cwe,owasp-a1,owasp-a2,owasp-a6,security',0,'HTML'),(330,'S923',NULL,'squid','<p>As stated per effective java : </p>\n<blockquote><p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can produce confusing results if used innapropriately.<blockquote></p>\n</blockquote>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )	// Noncompliant\n{\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 16.1 - Functions shall not be defined with a variable number of arguments.\n</li><li> MISRA C++:2008, 8-4-1 - Functions shall not be defined using the ellipsis notation.\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/i4CW\">CERT, DCL50-CPP.</a> - Do not define a C-style variadic function\n</li></ul>',0,NULL,'Functions should not be defined with a variable number of arguments','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'cert,misra,pitfall',0,'HTML'),(331,'S124',NULL,'squid','<p>This rule template can be used to create rules which will be triggered when a comment matches a given regular expression.</p>\n<p>For example, one can create a rule with the regular expression <code>.*TODO.*</code> to match all comment containing \"TODO\".</p>\n<p>Note that, in order to match TODO regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in <code>(?i).*TODO.*</code>.</p>',2,NULL,'Comments matching a regular expression should be handled','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,1,'HTML'),(332,'S2129',NULL,'squid','<p>Constructors for <code>Strings</code> and the objects used to wrap primitives should never be used. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for everything else.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\n</pre>',2,NULL,'Constructors should not be used to instantiate \"String\" and primitive-wrapper classes','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'performance',0,'HTML'),(333,'S2925',NULL,'squid','<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on environment (\"Passes on my machine!\") or load. Don\'t rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous testing. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n \n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>',2,NULL,'\"Thread.sleep\" should not be used in tests','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,47,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bad-practice',0,'HTML'),(334,'S2924',NULL,'squid','<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and there\'s no reason to leave them cluttering up the file if they\'re not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren\'t used by any of the test methods: <code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>',2,NULL,'JUnit rules should be used','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'tests,unused',0,'HTML'),(335,'S2391',NULL,'squid','<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named \"suite\", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a <code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren\'t properly capitalized will also be ignored.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... }  // Noncompliant; must be public static\npublic static boolean suite() { ... }  // Noncompliant; wrong return type\npublic static Test suit() { ... }  // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... }  // Noncompliant; should be tearDown\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>',3,NULL,'JUnit framework methods should be declared properly','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,tests',0,'HTML'),(336,'S3008',NULL,'squid','<p>Shared naming conventions allow teams to  collaborate efficiently. This rule checks that static non-final field names match a provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>',1,NULL,'Static non-final field names should comply with a naming convention','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'convention',0,'HTML'),(337,'S1989',NULL,'squid','<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it\'s a bad idea to let such exceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service attacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging information back to the user. And that information which could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response) \n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response) \n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  } \n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/600.html\">MITRE, CWE-600</a> - Uncaught Exception in Servlet\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/s4EVAQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure\">OWASP Top Ten Category A6</a> - Sensitive Data Exposure\n</li></ul>',3,NULL,'Exceptions should not be thrown from servlet methods','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,19,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cert,cwe,error-handling,owasp-a6,security',0,'HTML'),(338,'S2718',NULL,'squid','<p>The use of the <code>Instant</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code> class from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant \n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  instant = instant.truncatedTo(ChronoUnit.SECONDS);\n  return Date.from(instant);\n}\n</pre>',2,NULL,'\"DateUtils.truncate\" from Apache Commons Lang library should not be used','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,31,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'java8,performance',0,'HTML'),(339,'S2159',NULL,'squid','<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n<li> comparing an object with null\n</li><li> comparing an object with an unrelated primitive (E.G. a string with an int)\n</li><li> comparing unrelated classes\n</li><li> comparing an unrelated <code>class</code> and <code>interface</code>\n</li><li> comparing unrelated <code>interface</code> types\n</li><li> comparing an array to a non-array\n</li><li> comparing two arrays\n</li></ul>\n<p>Specifically in the case of arrays, since arrays don\'t override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same as comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for instance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be used with arrays.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) {  // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) {  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.securecoding.cert.org/confluence/x/IQAlAg\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays\n</li></ul>',3,NULL,'Silly equality checks should not be made','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert,unused',0,'HTML'),(340,'S3369',NULL,'squid','<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes, but it\'s a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-contraint&gt;</code> elements.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://cwe.mitre.org/data/definitions/284.html\">MITRE, CWE-284</a> - Improper Access Control\n</li><li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A7-Missing_Function_Level_Access_Control\">OWASP Top Ten 2013 Category A7</a> - Missing Function Level Access Control\n</li></ul>',3,NULL,'Security constraints should be defined','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'3h',NULL,NULL,'cwe,jee,owasp-a7,security,websphere',0,'HTML'),(341,'S2141',NULL,'squid','<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define <code>equals(Object)</code> but not <code>hashCode()</code> aren\'t truly hash-able because instances that are equivalent according to the <code>equals</code> method can return different hashes.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>',3,NULL,'Classes that don\'t define \"hashCode()\" should not be used in hashes','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug',0,'HTML'),(342,'S2140',NULL,'squid','<p>There is no need to multiply the output of <code>Random</code>\'s <code>nextDouble</code> method to get a random integer. Use the <code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>\'s methods that return a floating point value is converted to an integer.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>',2,NULL,'Methods of \"Random\" that return floating point values should not be used in random integer generation','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(343,'S2701',NULL,'squid','<p>There\'s no reason to use literal boolean values in assertions. Doing so is at best confusing for maintainers, and at worst a bug.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(true).isTrue(); // Noncompliant\n</pre>',2,NULL,'Literal boolean values should not be used in assertions','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'junit',0,'HTML'),(344,'S1854',NULL,'squid','<p>A dead store happens when a local variable is assigned a value, including <code>null</code>, that is not read by any subsequent instruction. Calculating or retrieving a value only to then overwrite it or throw it away, could indicate a serious error in the code. Even if it\'s not an error, it is at best a waste of resources. </p>\n<p>Even assigning <code>null</code> to a variable is a dead store if the variable is not subsequently used. Assigning null as a hint to the garbage collector used to be common practice, but is no longer needed and such code should be eliminated.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a;  //Dead store because the last return statement should return x instead of returning a\n  }\n  return a;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void pow(int a, int b) {\n  if(b == 0) {\n    return 0;\n  }\n  int x = a;\n  for(int i= 1, i &lt; b, i++) {\n    x = x * a; \n  }\n  return x;\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use (\'Unused Variable\')\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/QYA5\">CERT, MSC13-C.</a> - Detect and remove unused values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/S4IyAQ\">CERT, MSC13-CPP.</a> - Detect and remove unused values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/uQCSBg\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',2,NULL,'Dead stores should be removed','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cert,cwe,suspicious,unused',0,'HTML'),(345,'S1858',NULL,'squid','<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant construction may be optimized by the compiler, but will be confusing in the meantime.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>',1,NULL,'\"toString()\" should never be called on a String object','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'clumsy,finding',0,'HTML'),(346,'S2384',NULL,'squid','<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be returned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>, <code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/zQCuAQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/QIEVAQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/JQLEAw\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/kwCuAQ\">CERT, OOP08-CPP.</a> - Do not return references to private data\n</li></ul>',3,NULL,'Mutable members should not be stored or returned directly','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'cert,cwe,security,unpredictable',0,'HTML'),(347,'S2142',NULL,'squid','<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up the method\'s state - or the method should be reinterrupted. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted - probably without finishing its task.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () throws InterruptedException{\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // clean up state...\n    throw e;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\npublic void run () {\n  try {\n    while (true) { \n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // clean up state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition\n</li></ul>',3,NULL,'\"InterruptedException\" should not be ignored','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cwe,multi-threading',0,'HTML'),(348,'S2387',NULL,'squid','<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you\'ll get confusion at best, chaos at worst. Perhaps even worse is the case where a child class field varies from the name of a parent class only by case.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>This rule ignores <code>private</code> parent class fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field \'ripe\' is anyway not visible from Raspberry\n  // ...\n}\n</pre>',2,NULL,'Child class fields should not shadow parent class fields','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,39,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'confusing',0,'HTML'),(349,'S3355',NULL,'squid','<p>Specifying a validation filter for all input in your <code>web.xml</code> allows you to scrub all your HTTP parameters in one central place. To do so, you\'ll need to define a validator, and a filtering class that uses it, then set up the filter\'s use in <code>web.xml</code>.</p>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class ValidatingHttpRequest extends HttpServletRequestWrapper {\n  // ...\n}\n\npublic class ValidationFilter implements javax.servlet.Filter {\n  public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) {\n    chain.doFilter(new ValidatingHttpRequest( (HttpServletRequest)request ), response);\n  }\n}\n</pre>\n<p>and</p>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n       \n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://www.owasp.org/index.php/Top_10_2013-A1-Injection\">OWASP Top Ten 2013 Category A1</a> - Injection\n</li><li> <a href=\"https://www.owasp.org/index.php/How_to_add_validation_logic_to_HttpServletRequest\">OWASP, How to add validation logic to HttpServletRequest</a>\n</li></ul>',3,NULL,'Web applications should use validation filters','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,22,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'injection,owasp-a1,security',0,'HTML'),(350,'S2147',NULL,'squid','<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they should be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project\'s <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>',2,NULL,'Catches should be combined','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(351,'S3306',NULL,'squid','<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it\'s really a <code>NullPointerException</code> waiting to happen unless all your class constructors are <code>private</code>. That\'s because any class instances that are constructed by callers, rather than instantiated by the Spring framework, won\'t have the ability to perform the field injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor \n \n  @Inject MyCollaborator collaborator;  // Noncompliant\n  \n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n \n  private final MyCollaborator collaborator;\n  \n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>',2,NULL,'Constructor injection should be used instead of field injection','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'design,pitfall',0,'HTML'),(352,'S2693',NULL,'squid','<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you\'ll have a confusing mess on your hands if the class is ever extended because the superclass\' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>',2,NULL,'Threads should not be started in constructors','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'30min',NULL,NULL,'multi-threading,pitfall',0,'HTML'),(353,'S2692',NULL,'squid','<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the first element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider using the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against <code>&gt;0</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>',2,NULL,'\"indexOf\" checks should not be for positive numbers','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'suspicious',0,'HTML'),(354,'S2695',NULL,'squid','<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any set method of a <code>PreparedStatement</code> with a number less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1, rather than 0</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>',4,NULL,'\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'bug,sql',0,'HTML'),(355,'S3421',NULL,'squid','<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect, deprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated features should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*</code>} properties are used in a pom.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>',2,NULL,'Deprecated \"${pom}\" properties should not be used','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,8,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'maven,obsolete',0,'HTML'),(356,'S2694',NULL,'squid','<p>A non-static inner class has a reference to its outer class, and access to the outer class\' fields and methods. That class reference makes the inner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn\'t used, it is more efficient to make the inner class <code>static</code> (also called nested). If the reference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will also be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it\'s worth nothing that there are semantic differences between an inner class and a nested one:</p>\n<ul>\n<li> an inner class can only be instantiated within the context of an instance of the outer class.\n</li><li> a nested (<code>static</code>) class can be instantiated independently of the outer class.\n</li></ul>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there\'s no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>',2,NULL,'Inner classes which do not reference their owning classes should be \"static\"','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,29,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'performance',0,'HTML'),(357,'S3420',NULL,'squid','<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom\'s <code>artifactId</code> does not match the provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>',1,NULL,'Artifact ids should follow a naming convention','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention,maven',0,'HTML'),(358,'S3423',NULL,'squid','<p>The POM Code Convention convention recommends listing modifiers in the following order:</p>\n<ol>\n<li> &lt;modelVersion/&gt;\n</li><li> &lt;parent/&gt;\n</li><li> &lt;groupId/&gt;\n</li><li> &lt;artifactId/&gt;\n</li><li> &lt;version/&gt;\n</li><li> &lt;packaging/&gt;\n</li><li> &lt;name/&gt;\n</li><li> &lt;description/&gt;\n</li><li> &lt;url/&gt;\n</li><li> &lt;inceptionYear/&gt;\n</li><li> &lt;organization/&gt;\n</li><li> &lt;licenses/&gt;\n</li><li> &lt;developers/&gt;\n</li><li> &lt;contributors/&gt;\n</li><li> &lt;mailingLists/&gt;\n</li><li> &lt;prerequisites/&gt;\n</li><li> &lt;modules/&gt;\n</li><li> &lt;scm/&gt;\n</li><li> &lt;issueManagement/&gt;\n</li><li> &lt;ciManagement/&gt;\n</li><li> &lt;distributionManagement/&gt;\n</li><li> &lt;properties/&gt;\n</li><li> &lt;dependencyManagement/&gt;\n</li><li> &lt;dependencies/&gt;\n</li><li> &lt;repositories/&gt;\n</li><li> &lt;pluginRepositories/&gt;\n</li><li> &lt;build/&gt;\n</li><li> &lt;reporting/&gt;\n</li><li> &lt;profiles/&gt;\n</li></ol>\n<p>Not following this convention has no technical impact, but will reduce the pom\'s readability because most developers are used to the standard order.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention\">POM Code Convention</a>\n</li></ul>',1,NULL,'pom elements should be in the recommended order','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'convention,maven',0,'HTML'),(359,'S2696',NULL,'squid','<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple class instances  and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code> methods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>',3,NULL,'Instance methods should not write to \"static\" fields','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,multi-threading',0,'HTML'),(360,'S3422',NULL,'squid','<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact in an environment that\'s not configured just like yours is, your code won\'t work. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>',2,NULL,'Dependencies should not have \"system\" scope','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,9,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'lock-in,maven',0,'HTML'),(361,'S3546',NULL,'squid','<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule template allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom resources are leaked.</p>\n\n<h2>See also</h2>\n<ul>\n<li> {rule:squid:S2095} - Resources should be closed\n</li></ul>',3,NULL,'Custom resources should be closed','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'denial-of-service,security',1,'HTML'),(362,'S2699',NULL,'squid','<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the code under test.</p>\n<p>This rule raises an exception when no assertions are found in a JUnit test.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test \npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n  assertThat(myClass.doSomething());  // Fest assertion stub with no checks\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n@Test \npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n</pre>',3,NULL,'Tests should include assertions','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'10min',NULL,NULL,'tests',0,'HTML'),(363,'S2698',NULL,'squid','<p>Adding messages to JUnit assertions is an investment in your future productivity. Spend a few seconds writing them now, and you\'ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the tests and the assertion messages work as a sort of documentation.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\"); \n}\n</pre>',2,NULL,'JUnit assertions should include messages','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,51,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'tests',0,'HTML'),(364,'S2208',NULL,'squid','<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with the same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>',2,NULL,'Wildcard imports should not be used','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(365,'S3417',NULL,'squid','<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a dependency matches the configured forbidden dependency pattern. </p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre> \n&lt;dependency&gt; &lt;!-- Noncompliant --&gt; \n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt; \n    &lt;version&gt;1.2.17&lt;/version&gt; \n&lt;/dependency&gt; \n</pre>',2,NULL,'Disallowed dependencies should not be used','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,'maven',1,'HTML'),(366,'S2209',NULL,'squid','<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it\'s bad form, and considered by most to be misleading because it implies to the readers of your code that there\'s an instance of the member per class instance.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B { \n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B { \n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>',2,NULL,'\"static\" members should be accessed statically','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(367,'S3419',NULL,'squid','<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom\'s <code>groupId</code> does not match the provided regular expression.</p>\n\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>',1,NULL,'Group ids should follow a naming convention','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'convention,maven',0,'HTML'),(368,'S2681',NULL,'squid','<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be misleading and induce bugs. </p>\n<p>This rule raises an issue when the indentation of the lines after a one-line block indicates an intent to include those lines in the block, but the omission of curly braces means the lines will be unconditionally executed once.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) \n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/3wHEAw\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement\n</li></ul>',3,NULL,'Multiline blocks should be enclosed in curly braces','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'bug,cert,cwe',0,'HTML'),(369,'S2325',NULL,'squid','<p><code>private</code> methods that don\'t access instance data can be <code>static</code> to prevent any misunderstanding about the contract of the method.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n<li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code>\n</li><li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code>\n</li><li> <code>private void readObjectNoData() throws ObjectStreamException;</code>\n</li></ul>',1,NULL,'\"private\" methods that don\'t access instance data should be \"static\"','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML'),(370,'S1939',NULL,'squid','<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also implicitly implement its parents and there\'s no need to do so explicitly.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo \n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>',1,NULL,'Extensions and implementations should not be redundant','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'1min',NULL,NULL,'clumsy',0,'HTML'),(371,'S1941',NULL,'squid','<p>For the sake of clarity, variables should be declared as close to where they\'re used as possible. This is particularly true when considering methods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a variable that may never be used because conditions for an early return are met first.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n  \n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  \n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>',2,NULL,'Variables should not be declared before they are relevant','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'brain-overload',0,'HTML'),(372,'S2912',NULL,'squid','<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper choice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus the target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the result is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>',2,NULL,'\"indexOf\" checks should use a start position','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'confusing',0,'HTML'),(373,'S2112',NULL,'squid','<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both make calls out to the Internet and are blocking operations. <code>URI</code> on the other hand makes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>This rule checks for uses of <code>URL</code> \'s in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and <code>hashCode</code> methods.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>',2,NULL,'\"URL.hashCode\" and \"URL.equals\" should be avoided','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'performance',0,'HTML'),(374,'S1264',NULL,'squid','<p>When only the condition expression is defined in a <code>for</code> loop, but the init and increment expressions are missing, a <code>while</code> loop should be used instead to increase readability. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>',1,NULL,'A \"while\" loop should be used instead of a \"for\" loop','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'clumsy',0,'HTML'),(375,'S1940',NULL,'squid','<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...} \nboolean b = (i &gt;= 10);\n</pre>',1,NULL,'Boolean checks should not be inverted','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,16,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'pitfall',0,'HTML'),(376,'S864',NULL,'squid','<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex statements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational operators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n<tr><td> </td><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td><td><code>&amp;</code></td><td><code>^</code></td><td> <code>|</code> </td></tr>\n<tr><td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td><td> </td><td>x</td><td>x</td><td>x</td><td>x</td></tr>\n<tr><td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td><td>x</td><td> </td><td>x</td><td>x</td><td>x</td></tr>\n<tr><td><code>&amp;</code></td><td>x</td><td>x</td><td> </td><td>x</td><td>x</td></tr>\n<tr><td><code>^</code></td><td>x</td><td>x</td><td>x</td><td> </td><td>x</td></tr>\n<tr><td> <code>|</code> </td><td>x</td><td>x</td><td>x</td><td>x</td><td> </td></tr>\n</table>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 12.1 - Limited dependence should be placed on C\'s operator precedence rules in expressions\n</li><li> MISRA C++:2008, 5-0-2 - Limited dependence should be placed on C++ operator precedence rules in expressions\n</li><li> MISRA C:2012, 12.1 - The precedence of operators within expressions should be made explicit\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/_wI\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/VoAyAQ\">CERT, EXP00-CPP.</a> - Use parentheses for precedence of operation\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/9wHEAw\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error\n</li></ul>',2,NULL,'Limited dependence should be placed on operator precedence rules in expressions','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,15,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'cert,cwe,misra',0,'HTML'),(377,'S3438',NULL,'squid','<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic connection recovery when the connection goes bad. </p>\n<p>That\'s because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this connection factory (Spring\'s <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won\'t work because the <code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing anything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>',3,NULL,'\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,38,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'2min',NULL,NULL,'bug,spring',0,'HTML'),(378,'S3318',NULL,'squid','<p>Data in a web session is considered inside the \"trust boundary\". That is, it is assumed to be trustworthy. But storing unvetted data from an unauthenticated user violates the trust boundary, and may lead that that data being used inappropriately.</p>\n<p>This rule raises an issue when data from <code>Cookie</code>s or <code>HttpServletRequest</code>s is stored in a session. </p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogin = request.getParameter(\"login\");\nsession.setAttribute(\"login\", login);  // Noncompliant\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/501\">MITRE, CWE-501</a> - Trust Boundary Violation\n</li></ul>',3,NULL,'Untrusted data should not be stored in sessions','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,20,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'cwe,security',0,'HTML'),(379,'S2583',NULL,'squid','<p>Conditional statements using a condition which cannot be anything but <code>FALSE</code> have the effect of making blocks of code non-functional. If the condition cannot evaluate to anything but <code>TRUE</code>, the conditional statement is completely redundant, and makes the code less readable.</p>\n<p>It is quite likely that the code does not match the programmer\'s intent.</p>\n<p>Either the condition should be removed or it should be updated so that it does not always evaluate to <code>TRUE</code> or <code>FALSE</code>.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\n//foo can\'t be both equal and not equal to bar in the same expression\nif( foo == bar &amp;&amp; something &amp;&amp; foo != bar) {...} \n</pre>\n<pre>\nprivate void compute(int foo) {\n  if (foo == 4 ) {\n    doSomething();\n    // We know foo is equal to 4 at this point, so the next condition is always false\n    if (foo &gt; 4) {...}\n    ...\n  }\n  ...\n}\n</pre>\n<pre>\nprivate void compute(boolean foo) {\n  if (foo) {\n    return;\n  }\n  doSomething();\n  // foo is always false here\n  if (foo){...}\n  ...\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> MISRA C:2004, 13.7 - Boolean operations whose results are invariant shall not be permitted.\n</li><li> MISRA C:2012, 14.3 - Controlling expressions shall not be invariant\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/489\">MITRE, CWE-489</a> - Leftover Debug Code\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/570\">MITRE, CWE-570</a> - Expression is Always False\n</li><li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/NYA5\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n</li><li> <a href=\"https://www.securecoding.cert.org/confluence/x/SIIyAQ\">CERT, MSC12-CPP.</a> - Detect and remove code that has no effect\n</li></ul>',3,NULL,'Conditions should not unconditionally evaluate to \"TRUE\" or to \"FALSE\"','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,43,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'bug,cert,cwe,misra',0,'HTML'),(380,'S2222',NULL,'squid','<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method\'s callers and hence be deadlock-prone.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private Lock lock = new Lock();\n\n  public void doSomething() {\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup\n</li></ul>',3,NULL,'Locks should be released','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,46,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'20min',NULL,NULL,'bug,cwe,multi-threading',0,'HTML'),(381,'S2221',NULL,'squid','<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types and so both checked and runtime exceptions, casting too broad a net. Indeed, was it really the intention of developers to also catch runtime exceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed in the <code>catch</code> clause.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n\n<h2>Exceptions</h2>\n<p>No issue is raised if a method in the <code>try</code> block explicitly throws an <code>Exception</code>.</p>\n\n<h2>See</h2>\n<ul>\n<li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception\n</li></ul>',3,NULL,'\"Exception\" should not be caught when not required by called methods','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,40,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'15min',NULL,NULL,'cwe,error-handling,security',0,'HTML'),(382,'S1258',NULL,'squid','<p>Non-abstract <code>class</code>es and <code>enum</code>s with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a constructor or with a default value.</p>\n\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>',2,NULL,'Classes and enums with private members should have a constructor','READY','java','2017-10-10 15:22:05','2017-10-10 15:22:05',NULL,NULL,NULL,NULL,NULL,42,NULL,'CONSTANT_ISSUE',NULL,NULL,NULL,'5min',NULL,NULL,'pitfall',0,'HTML');
/*!40000 ALTER TABLE `rules` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2017-11-02 14:31:58
